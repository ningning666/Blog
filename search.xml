<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[引用类型]]></title>
    <url>%2FBlog%2Fposts%2F12.html</url>
    <content type="text"><![CDATA[引用类型的值（对象）是引用类型的一个实例，在ECMAScript中，引用类型是一种数据结构，用于将数据和功能组织在一起。它也常被称作类，但这种称呼并不妥当。尽管ECMAScript从技术上讲是一门面向对象的语言，但它不具备传统的面向对象语言所支持的类和接口等基本结构。引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。 1var person = new Object(); 这行代码创建了Object引用类型的一个新实例，然后把该实例保存在了变量person中。使用的构造函数是Object，它只为新对象定义了默认的属性和方法。ECMAScript提供了很多原生引用类型（例如Object），以便开发人员用以实现常见的计算任务。 Object 类型创建Object类型的方式有两种，第一种是使用new操作符后跟Object构造函数，如下所示： 123var person = new Object();person.name = "Nicholas";person.age = 29; 另一种方法是使用对象字面量的方法，如下所示： 1234var person = &#123; name: "Nicholas", age: 29&#125; 关于对象字面量语法，如果留空其花括号，则可以定义只包含默认属性和方法的对象，如下所示： 123var person = &#123;&#125; //与new Object()相同person.name = "Nicholas";person.age = 29; **开发人员更青睐对象字面量语法，因为这种语法要求的代码量少，而且能够给人封装数据的感觉，实际上，对象字面量也是向函数传递大量可选参数的首选方式。 访问对象属性有两种办法：点表示法和方括号表示法 12console.log(person["name"]); // "Nicholas"console.log(person.name); // "Nicholas" 从功能上看，这两种访问对象属性的方法没有任何区别，但方括号语法的主要优点是可以通过变量来访问属性，例如： 12var propertyName = "name";console.log(person[propertyName]); // "Nicholas" 如果属性名中包含会导致语法错误的字符，或者属性名使用的是关键字或保留字，也可以使用方括号表示法，例如： 1person["first name"] = "Nicholas"; Array 类型Array类型与Object类型一样都是ECMAScript中最常用的类型，ECMAScript数组与其他语言中的数组都是数据的有序列表，但与其他语言不同的是，ECMAScript数组的每一项可以保存任何类型的数据，创建数组的基本方式有两种，第一种是使用Array构造函数，如下所示： 1var colors = new Array(); 创建数组也可以按照下面几种方式进行创建： 1234var colors = new Array(20); //创建length为20的数组var colors = new Array("red", "blue", "green"); // 创建了一个包含三个字符串值的数组var colors = new Array(3); // 创建一个包含3项的数组var colors = new Array("Grey"); //创建一个包含1项，即字符串"Grey"的数组 在使用Array构造函数时也可以省略new操作符，省略new操作符与不省略new操作符的结果相同。 创建数组的第二种基本方式是使用数组字面量表示法，数组字面量由一对包含数组项的方括号表示，多个数组项之间以逗号隔开，如下所示： 1234var colors = ["red", "blue", "green"]; //创建一个包含3个字符串的数组var name = []; //创建一个空数组var values = [1,2,]; //不要这样！这样会创建一个包含2项或3项的数组var options = [,,,,,]; //不要这样！这样会创建一个包含5项或6项的数组 在读取和设置数组的值时，要使用方括号并提供响应值的基于0的数字索引，如下所示： 12345var colors = ["red", "blue", "green"]; //定义一个字符串数组console.log(color[0]); //显示第一项color[2] = "black"; //修改第三项color[3] = "brown"; /新增第四项console.log(colors.length); //4 上面例子的数组的length属性不是只读的，通过设置这个属性，可以从数组的末尾移除或向数组中添加新项，如下所示： 123var colors = ["red", "blue", "green"];colors.length = 2;console.log(colors[2]); //undefined 下面介绍数组会用到的一些方法 检测数组方法ECMAScript新增Array.isArray()方法，这个方法能确定某个值最终到底是不是数组，不管在哪个全局环境下创建的。 123if (Array.isArray(value)) &#123; //对数组执行某些操作&#125; 转换方法数组继承的toString()返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串，valueOf()返回的还是数组。使用join()方法，则可以使用不同的分隔符来构建字符串，join()方法只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。 1234var colors = ["red", "blue", "green"];console.log(colors.toString());console.log(colors.valueOf());console.log(colors.join("||")); 输出结果如下： 123red,blue,green[ 'red', 'blue', 'green' ]red||blue||green 栈方法ECMAScript为数组专门提供了push()和pop()方法，以便实现类似栈的行为。push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度；pop()方法则从数组末尾移除最后一项，减少数组的length()值，然后返回移除的项。 12345678910var colors = new Array();var count = colors.push("red", "green");console.log(count); //2count = colors.push("black");console.log(count); //3var item = colors.pop();console.log item; //"black"console.log(colors.length); //2 队列方法实现这一操作的方法有两组：从数组末端添加项，从数组前端取得项：push()与shift()方法从数组前端添加项，从数组末端取得项：unshift()与pop()方法 12345678910var colors = new Array();var count = colors.push("red", "green");console.log(count); //2count = colors.push("black");console.log(count); //3var item = colors.shift();console.log(item); //"red"console.log(colors.length); //2 这个例子创建了一个数组并使用push()方法先后推入了3个值，首先是”red”和”green”，然后是”black”，数组中各项的顺序为”red”,”green”,”black”，在调用shift()方法时，移除并返回的是第一项，即”red”。 12345678910var colors = new Array();var count = colors.unshift("red", "green");console.log(count); //2count = colors.unshift("black");console.log(count); //3var item = colors.pop();console.log(item); //"green"console.log(colors.length); //2 这个例子创建了一个数组并使用unshift()方法先后推入了3个值，首先是”red”和”green”，然后是”black”，数组中各项的顺序为”black”,”red”,”green”，在调用pop()方法时，移除并返回的是最后一项，即”green”。 重排序方法reverse()方法：反转数组项的顺序。 123var values = [1,2,3,4,5];values.reverse();console.log(values); //5,4,3,2,1 sort()方法：按照升序或者降序顺序排列数组项，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，然后接收一个比较函数作为参数，以确定排列顺序。示例如下：这个示例是按照升序进行排列的，若是按照降序排列，只需交换比较函数返回的值即可。 123456789101112function compare(value1,value2) &#123; if(value1 &lt; value2) &#123; return -1; &#125;else if (value1 &gt; value2) &#123; return 1; &#125; else &#123; return 0; &#125;&#125;var values = [0,1,5,10,15];values.sort(compare);console.log(values)； // 0，1，5，10，15 操作方法要介绍的concat()方法、slice()方法都不影响原始数组。concat()方法：可以基于当前数组中的所有项创建一个新数组，具体来说，这个方法会先创建当前数组的一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。 12345var colors1 = ["red", "green", "blue"];var colors2 = colors1.concat("yellow", ["black", "brown"]);console.log(colors1); //red,green,blueconsole.log(colors2); //red,green,blue,yellow,black,brown slice()方法：能够基于当前数组中的一个或多个项创建一个新数组，slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项；如果有两个参数，该方法返回起始和结束位置之间的项但不包括结束位置的项。 123456var colors1 = ["red", "green", "blue", "yellow", "purple"];var colors2 = colors1.slice(1);var colors3 = colors1.slice(1,4);console.log(colors2); //green,blue,yellow,purpleconsole.log(clolors3); //green,blue,yellow splice()方法：该方法包括对原始数组的删除、插入以及替换功能 删除：可以删除任意数量的项，只需提供2个参数：要删除的第一项的位置和要删除的项数； 插入：可以向指定位置插入任意数量的项，只需提供3个参数：起始位置、0（要删除的项数）和要插入的项； 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3个参数：起始位置、要删除的项数和要插入的任意数量的项，插入的项不必等于删除的项数。实例如下所示： 123456789101112var colors = ["red", "green", "blue"];var removed = colors.splice(0,1); //删除第一项console.log(colors); // green,blueconsole.log(removed); // redremoved = colors.splice(1,0,"yellow", "orange"); //从位置1开始插入两项console.log(colors); // green,yellow,orange,blueconsole.log(removed); // 返回的是一个空数组removed = colors.splice(1,1,"red", "purple"); //插入两项，删除一项console.log(colors); // green,red,purple,orange,blueconsole.log(removed); // yellow 位置方法ECMAScript5为数组实例添加了两个位置方法：indexOf()和lastIndexOf()方法，这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位置0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1，在比较第一个参数与数组中的每一项时，使用全等操作符（===） 12345678910111213var colors = new Array("red", "blue", "green", "black", "blue", "purple");console.log(colors.indexOf("blue"); // 1console.log(colors.indexOf("blue",2); // 4console.log(colors.latIndexOf("blue"); // 4console.log(colors.indexOf("yellow"); // -1//比较时全等var str1 = new String("blue");var str2 = "blue";console.log(typeof(str1)); //objectconsole.log(typeof(str2)); //stringconsole.log(colors.indexOf(str1)); //-1console.log(colors.indexOf(str2)); //1 迭代方法ECMAScript提供了5个迭代方法，每个方法都接受两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响this的值,传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身。以下方法都不会修改数组中的包含的值。 every(): 对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。 filter(): 对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组。 forEach()：对数组中的每一项运行给定函数，这个方法没有返回值。 map(): 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 some(): 对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。实例如下： 123456789101112131415161718192021222324252627var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item,index,array)&#123; return (item &gt; 2);&#125;)console.log(everyResult); //falsevar someResult = numbers.some(function(item,index,array)&#123; return (item &gt; 2);&#125;)console.log(someResult); //truevar filterResult = numbers.filter(funvtion(item,index,array)&#123; rerurn (item &gt; 2);&#125;)console.log(filterResult); // [3,4,5,4,3]var mapResult = numbers.map(function(item,index,array)&#123; return item * 2;&#125;)console.log(mapResult); //[2,4,6,8,10,8,6,4,2]numbers.forEach(function(item,index,array&#123; //执行某些操作，这个方法没有返回值，本质上与for循环迭代数组一样&#125;)) 缩小方法ECMAScript5新增了两个缩小数组的方法：reduce()和reduceRight()。这两个数组都会迭代数组的所有项，然后构建一个最终返回的值。reduce()方法从数组的第一项开始，逐个遍历到最后；reduceRight()则从数组的最后一项开始，向前遍历到第一项。这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为缩小基础的初始值，传给reduce()和reduceRight()的函数接收4个参数：前一个值、当前值、项的索引和数组对象，这个函数返回的任何值都会作为第一个参数自动传给下一项，第一次迭代发生在数组的第二项上，因此第一个参数就是数组的第一项，第二个参数就是数组的第二项。使用reduce()方法可以执行求数组中所有值之和的操作，如下所示： 12345var values = [1,2,3,4,5];var sum = values.reduce(function(prev,cur,index,array)&#123; return prev + cur;&#125;)console.log(sum); //15 reduceRight()的作用类似，只不过方向相反而已。 Date类型ECMAScript中的Date类型是在早期Java中的java.utip.Date类基础上构建的，为此，Date类型使用自UTC1970年1月1日午夜（零时）开始经过的毫秒数来保存日期。要创建一个日期对象，使用new操作符和Date构造函数即可，如下所示： 1var now = new Date(); 在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根据特定的日期和时间创建日期对象，必须传入该日期的毫秒数，为了简化这一计算，ECMAScript提供了两个方法：Date.parse()和Date.UTC()。Date.parse()是Date对象的静态方法，parse()方法可解析一个日期时间字符串，并返回 1970/1/1 午夜距离该日期时间的毫秒数。语法如下： 1Date.parse(datestring) UTC() 方法可根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。Date.UTC() 是一种静态方法，因为需要使用构造函数 Date() 来调用它，而不是通过某个 Date 对象调用。 Date.UTC() 方法的参数指定日期和时间，它们都是 UTC 时间，处于 GMT 时区。指定的UTC时间将转换成毫秒的形式，这样构造函数 Date() 和方法 Date.setTime() 就可以使用它了。语法如下： 1Date.UTC(year,month,day,hours,minutes,seconds,ms) 继承方法与其他引用类型一样，Date类型也重写了toLocalString()、toString()和valueOf()方法，但这些方法返回的值与其他类型中的方法不同。Date()类型的toLocalString()方法会按照与浏览器设置的地区相适应的格式返回日期和时间，这大致意味着时间格式中会包含AM或PM，但不会包含时区信息；而toString()方法则通常返回带有时区信息的日期和时间，其中时间一般以军用时间（即小时的范围是0到23）表示。Date类型的valueOf()方法则根本不返回字符串，而是返回日期的毫秒表示。 日期格式化方法 toDateString(): 以特定实现的格式显示星期几、月、日和年； toTimeString(): 以特定于实现的格式显示时、分、秒和时区； toLocalTimeString(): 以特定于实现的格式显示时、分、秒； toLocalDateString(): 以特定于地区的格式显示星期几、月、日和年； toUTCString(): 以特定于实现的格式显示完整的UTC日期。 还有很多关于日期的函数方法： 更多参考：Date对象方法 RegExp类型ECMAScript通过RegExp类型来支持正则表达式 1var expression = /pattern/flags; 其中的模式(pattern)部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向引用。每个正则表达式都可带有一或多个标志（flags），用以标名正则表达式的行为，正则表达式的匹配模式支持下列3个标志： g: 表示全局(global)模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止； i: 表示不区分大小写模式，，即在确定匹配项时忽略模式与字符串的大小写； m: 表示多行模式，即在到达一行文末末尾时还会继续查找下一行中是否存在与模式匹配的项。因此一个正则表达式就是一个模式与上述3个标志的组合体，不同组合产生不同结果，如下面的例子所示： 1234567891011121314/* * 匹配字符串中所有"at"的实例 */var patttern1 = /at/g;/* * 匹配第一个"bat"或者"cat"，不区分大小写 */var patttern2 = /[bc]at/i;/* * 匹配字符串中所有以"at"结尾的3个字符的组合，不区分大小写 */var patttern3 = /.at/gi; 与其他语言中的正则表达式一样，模式中所使用的所有元字符都必须转义，正则表达式中的元字符包括： 1( | &#123; \ ^ $ ) ? * + . ]&#125; 这些元字符在正则表达式中都有一或多种特殊用途，因此想要匹配字符串中包含的这些字符，就必须对它们进行转义，下面给出几个例子： 12345678910111213141516171819/* * 匹配第一个"bat"或"cat"，不区分大小写 */var pattern1 = /[bc]at/i;/* * 匹配第一个"[bc]at"，不区分大小写 */var pattern2 = /\[bc\]at/i;/* * 匹配字符串中所有以"at"结尾的3个字符的组合，不区分大小写 */var patttern3 = /.at/gi;/* * 匹配字符串中所有以".at"结尾的3个字符的组合，不区分大小写 */var patttern4 = /\.at/gi; 前面举得这些例子都是以字面量形式来定义的正则表达式，另一种创建正则表达式的方式是使用RegExp构造函数，它接收两个参数：一个是要匹配的字符串模式，另一个是可选的标志字符串，可以使用字面量定义的任何表达式，都可以使用构造函数来定义，如下面的例子所示： 123456789/* * 匹配第一个"bat"或"cat"，不区分大小写 */var pattern1 = /[bc]at/i;/* * 与pattern1相同，只不过是使用构造函数创建的 */var pattern2 = new RegExp("[bc]at", "i"); 使用正则表达式字面量和使用RegExp构造函数创建的正则表达式u不一样，在ECMAScript3 中，正则表达式字面量始终会共享一个RegExp实例，而使用构造函数创建的每一个新RegExp实例都是一个新实例。如下所示： 123456789var re = null,i;for (i=0; i&lt;10; i++) &#123; re = /cat/g; console.log((re.text("catastrophe")));&#125;for (i=0; i&lt;10; i++)&#123; re = new RegExp("cat", "g"); console.log(re.text("catastrophe"));&#125; 在第一个循环中，即使是循环体指定的，但实际上只为/cat/创建了一个RegExp实例，由于实例属性不会重置，所以在循环中再次调用text()方法会失败，这是因为第一次调用text()找到了”cat”，但第二次调用是从索引为3的字符（上一次匹配的末尾）开始的，所以就找不到它了，由于会测试到字符串末尾，所以下一次再调用text()就又从开头开始了。第二个循环使用RegExp构造函数在每次循环中创建正则表达式，因为每次迭代都会创建一个新的RegExp构造函数一样，每次创建新的RegExp实例。 RegExp实例属性RegExp的每个实例都具有下列属性，通过这些属性可以取得有关模式的各种信息。 global: 布尔值，表示是否设置了g标志； ignoreCase: 布尔值，表示是否设置了i标志； lastIndex: 整数，表示开始搜索下一个匹配项的字符位置，从0算起； multiline: 布尔值，表示是否设置了m标志； source：正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回。实例如下所示： 12345678910111213var pattern1 = /\[bc]at/i;console.log(pattern1.global); //falseconsole.log(pattern1.ignoreCase); //trueconsole.log(pattern1.lastIndex); //0console.log(pattern1.multiline); //falseconsole.log(pattern1.source); //"\[bc]at"var pattern2 = new RegExp("\\[bc\\]at", "i");console.log(pattern2.global); //falseconsole.log(pattern2.ignoreCase); //trueconsole.log(pattern2.lastIndex); //0console.log(pattern2.multiline); //falseconsole.log(pattern2.source); //"\[bc]at" RegExp实例方法RegExp对象的主要方法是exec()，该方法是专门为捕获组而设计的。exec()接收一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组，或者在没有匹配项的情况下返回null。返回的数组包含两个额外的属性：index与input属性，index表示匹配项在字符串中的位置，input表示应用正则表达式的字符串。在数组中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串（如果模式中没有匹配组，则该数组只包含一项）实例如下： 123456789var text = "mom and dad and baby";var pattern = /mom(and dad(and baby)?)?/gi;var matches = pattern.exec(text);console.log(matches.index); // 0 与整个模式匹配的字符串的第一项的位置console.log(matches.input); // "mom and dad and baby" 与整个模式匹配的字符串console.log(matches[0]); // "mom and dad and baby" 整个字符串本身的匹配项console.log(matches[1]); // "and dad and baby" 与第一个捕获组匹配的内容console.log(matches[2]); // "and baby" 与第二个捕获组匹配的内容 对于exec()方法而言，即使在模式中设置了全局标志(g)，它每次也只会返回一个匹配项，在不设置全局标志的情况下，在同一个字符串上多次调用exec()将始终返回第一个匹配项的信息，而在设置全局标志的情况下，每次调用exec()则都会在字符串中继续查找新匹配项。如下面例子所示： 1234567891011121314151617181920212223var text = "cat,bat,sat,fat"# 非全局模式下：var pattern1 = /.at/;var matches = pattern1.exec[text];console.log(matches.index); //0console.log(matches[0]); //catconsole.log(pattern1.lastIndex); //0# 每次调用exec()返回的都是第一个匹配项("cat")matches = pattern1.exec[text];console.log(matches.index); //0console.log(matches[0]); //catconsole.log(pattern1.lastIndex); //0var pattern2 = /.at/g;var matches = pattern2.exec[text];console.log(matches.index); //0console.log(matches[0]); //catconsole.log(pattern2.lastIndex); //4# 每次调用exec()返回的都是下一个匹配项，直到搜索到字符串末尾为止matches = pattern1.exec[text];console.log(matches.index); //0console.log(matches[0]); //batconsole.log(pattern2.lastIndex); //8 正则表达式的第二个方法是test(),它接受一个字符串参数，在模式与该参数匹配的情况下返回true，否则返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便，因此test()方法经常被用在if语句中。 12345var text = "000-00-0000";var pattern = /\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/;if(pattern.test(text))&#123; console.log("这个模式有匹配项")&#125; RegExp构造函数属性RegExp构造函数包含一些属性，这些属性适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化，并且这些属性可以以两种方式访问，下表列出了RegExp构造函数的一些属性 长属性名 短属性名 说明 input $_ 最近一次要匹配的字符串，Opera未实现此属性 lastMatch $&amp; 最近一次的匹配项，Opera未实现此功能 lastParen $+ 最近一次匹配的捕获组，Opera未实现此属性 leftContext $` input字符串中lastMatch之前的文本 mulitiline $* 布尔值，表示是否所有表达式都是使用多行模式，IE和Opera未实现此属性 rightContext $’ input字符串中lastMatch之后的文本 使用这些属性可以从exec()或test()执行的操作中提取出更具体的信息，例子如下： 123456789var text = "this has been a short summer";var pattern = /(.)hort/g;if(pattern.test(text))&#123; console.log(RegExp.input); //this has been a short summer console.log(RegExp.lastMatch); //short console.log(RegExp.leftContext); //this has been a console.log(RegExp.rightContext); //summer console.log(RegExp.mulitiline); //false&#125; 还可以通过短属性来访问它们，这里就不介绍了，与长属性用法相同 除了上面介绍的几个属性之外，还有多达9个用于存储捕获组的构造函数属性，访问这些属性的方法是RegExp.$1、RegExp.$2 … RegExp.$9，分别用于存储第一、第二……第九个匹配的捕获组，在调用exec()或test()方法时，这些属性会被自动填充，如下所示： 123456var text = "this has been a short summer"var pattern = /(..)or(.)/g;if(pattern.test(text))&#123; console.log(RegExp.$1); //sh console.log(RegExp.$2); //t&#125; Function 类型函数是对象，函数名是一个指向函数对象的指针，不会与某个函数绑定，函数声明定义形式如下： 123function sum (num1,num2)&#123; return num1 + num2;&#125; 函数没有重载12345678function addSomeNumber(num) &#123; reurn num +100;&#125;function addSomeNumber(num) &#123; reurn num +200;&#125;var result = addSomeNumber(100); //300 第二个函数覆盖了第一个函数的变量，函数没有重载 函数声明与函数表达式解析器在向执行环境中加载数据时，会先读取函数声明，并使其在执行任何代码之前可用（可以访问），而函数表达式是等到解析器执行到它所在的代码行，才会真正被解释执行。如下所示： 1234console.log(sum(20,20));function sum(num1,num2)&#123; return num1 +num2;&#125; 解析器通过一个名为函数声明提升的过程，读取并将函数声明添加到执行环境中，就是sum函数已经提前声明，所以可以在前面调用 作为值的函数可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回，如下所示： 123function callSomeFunction(someFunction, someArgument)&#123; return someFunction(someArgument);&#125; 函数内部属性函数内部有3个特殊的对象：arguments、this和caller。arguments是一个类数组对象，包含着传入函数中的所有参数，除此之外arguments还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数；如下递归阶乘函数所示： 1234567function factorial(num) &#123; if(num&lt;=1) &#123; return 1; &#125; else &#123; return num*arguments.callee(num-1) &#125;&#125; this引用的是函数执行的环境对象，在全局作用域中，this对象引用的是window。比如下面的例子： 12345678window.color = "red";var o = &#123;color: "blue"&#125;;function sayColor() &#123; console.log(this.color);&#125;sayColor(); //"red"o.sayColor = sayColor;o.sayColor(); //"blue" 第一次调用sayColor()是在全局作用域中定义的，this引用的对象是window，所以输出为”red”, 第二次this引用的对象是0，所以this.color= o.color, 返回为”blue”caller属性保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，会为null。示例如下： 1234567function outer() &#123; inner();&#125;function inner() &#123; console.log(arguments.calle.caller);&#125;outer(); 函数属性和方法由于ECMAScript中的函数是对象，所以函数也有属性和方法，每个函数有两个属性：length和prototypelength表示函数希望接收的命名参数的个数，prototype指的函数的原型方法，toString()、valueOf()等都属于prototype内。每个函数也会包含两个非继承而来的方法：apply()和call(),这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组，其中，第二个参数可以是Array的实例，也可以是arguments对象。如下面的例子所示： 123456789101112function sum(num1,num2) &#123; return num1 + num2;&#125;function callSum1(num1,num2) &#123; return sum(this,arguments);&#125;function callSum2(num1,num2) &#123; return sum(this,[num1,num2]);&#125;console.log(callSum1(10,10)) //20console.log(callSum2(10,10)) //20 call()与apply()的作用没有什么不同，只是call()必须将传递给函数的参数逐个列举出来，如下面例子所示： 1234567function sum(num1,num2) &#123; return num1 + num2;&#125;function callSum(num1,num2) &#123; return sum(this,num1,num2);&#125;console.log(callSum(10,10)) //20 传递参数并非apply()和call()的真正用武之地，它们真正强大的地方是能扩充函数赖以运行的作用域，示例如下： 12345678window.color = "red";var o = &#123;color: "blue"&#125;;function sayColor() &#123; console.log(this.color);&#125;sayColor.call(this); //"red"sayColor.call(window); //"red"sayColor.call(o); //"blue" ECMAScript5还定义了一个方法：bind(),这个方法会创建一个函数的实例，其this值会被绑定到传给bind()函数的值，例如： 12345678window.color = "red";var o = &#123;color: "blue"&#125;;function sayColor() &#123; console.log(this.color);&#125;var objectSayColor = sayColor.bind(o);objectSayColor(); //"blue" String类型字符方法charAt()与chaeCodeAt()方法，这两个方法都接收一个参数，即基于0的字符位置，charAt()方法以单字符串的形式返回给定位置的那个字符，chaeCodeAt()返回的是给定位置的字符编码 123var stringValue = "hello world"；console.log(stringValue.charAt(1)); //"e"console.log(stringValue.与chaeCodeAt(1)); //"101" 字符串操作方法concat()：用于将一或多个字符串拼接起来 1234var stringValue = "hello ";var result = stringValue.concat("world", "!");console.log(result); //"hello world!"console.log(stringValue) //"hello " 创建新字符串的三种方法：都接受一到两个参数slice()：第一个参数用于指定字符串的开始位置，第二个参数表示字符串到哪里结束substring()：第一个参数用于指定字符串的开始位置，第二个参数表示字符串到哪里结束substr()： ：第一个参数用于指定字符串的开始位置，第二个参数表示返回的字符个数 12345678var stringValue = "hello world";console.log(stringValue.slice(3)); //"lo world"console.log(stringValue.substring(3)); //"lo world"console.log(stringValue.substr(3)); //"lo world"console.log(stringValue.slice(3,7)); //"lo w"console.log(stringValue.substring(3,7)); //"lo w"console.log(stringValue.substr(3,7)); //"lo worl" 字符串位置方法有两个可以从字符串中查找子字符串的方法：indexOf()和lastIndexOf()，这两个方法都是从一个字符串中搜索给定的子字符串，然后返子字符串的位置（如果没有找到该字符串，则返回-1），indexOf()方法是从字符串的开头向后搜索子字符串，而和lastIndexOf()方法是从字符串的末尾向前搜索子字符串。同时这两个方法都可以接收第二个参数，表示从字符串的哪个位置开始搜索。因此可以通过循环调用indexOf()和lastIndexOf()来找到所有匹配的子字符串。如下所示： 123456789var stringValue = "hello world,helo,dsjfkgsdlfkglfd";var positions = new Array();var pos = stringValue.indexOf("e");while(pos&gt;-1)&#123; positions.push(pos); pos = stringValue.indexOf("e", pos+1);&#125;console.log(positions); //[ 1, 13 ] trim()方法trim()方法会创建一个字符串的副本，删除前置及后缀的所有空格，然后返回结果，示例如下： 123var stringValue = " hello world ";var trimstringValue = stringValue.trim();console.log(trimstringValue); //"hello world" 字符串大小写转换方法字符串大小写转换方法有toLowerCase()、toLocaleLowerCase()、toUpperCase()、toLocaleUpperCase()。toLowerCase()与toUpperCase()是通用方法，toLocaleLowerCase()与toLocaleUpperCase()是针对特定地区的实现，一般来说不知道自己的代码将在哪种语言运行环境下运行的时候，还是使用针对地区的方法更稳妥一些，示例如下： 12345var stringValue = "Hello World"console.log(stringValue.toLowerCase());console.log(stringValue.toLocaleLowerCase());console.log(stringValue.toUpperCase());console.log(stringValue.toLocaleUpperCase()); 输出结果如下： 1234hello worldhello worldHELLO WORLDHELLO WORLD 字符串的模式匹配方法match(): 在字符串上调用这个方法，本质上与调用RegExp的exec()方法相同，match()只接收一个参数，要么是一个正则表达式，要么是一个RegExp对象。示例如下： 123456var text = "cat,bat,sat,fat"var pattern = /.at/;var matches = text.match(pattern);console.log(matches.index); //0console.log(matches[0]); //catconsole.log(pattern.lastIndex); //0 search()：这个方法返回字符串中的第一个匹配项的索引，如果没有找到匹配项，则返回-1，这个方法的唯一参数与match()方法相同。如下所示： 1234var text = "hello,bat,sat,fat"var pattern = /.at/;var pos = text.search(pattern);console.log(pos); //6 replace()方法：这个方法接受两个参数，第一个参数可以是一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串，要想替换所有子字符串，唯一的方法就是提供一个正则表达式，而且要指定全局（g）标志。如下所示： 123var text = "cat,bat,sat,fat"var result = text.replace(/at/g,"12");console.log(result); 结果如下： 1c12,b12,s12,f12 replace()方法的第二个参数也可以是一个函数，在只有一个匹配项的情况下，会向这个函数传递3个参数：模式的匹配项、模式匹配项在字符串中的位置和原始字符串。在正则表达式中定义了多个捕获组的情况下，传递给函数的参数依次是模式的匹配项、第一个捕获组的匹配项、第二个捕获组的匹配项……，但最后两个参数仍然分别是模式的匹配项在字符串中的位置和原始字符串。如下所示： 123456789101112131415function himlEscape(text) &#123; return text.replace(/[&lt;&gt;"&amp;]/g, function(match,pos,originalText)&#123; switch(match) &#123; case "&lt;": return "&amp;lt;"; case "&gt;": return "&amp;gt;"; case "&amp;": return "&amp;amp;"; case "\"": return "&amp;quot" &#125; &#125;);&#125;console.log(himlEscape("&lt;p class=\"greeting\"&gt;Hello World!&lt;/p&gt;")); //&amp;lt;p class=&amp;quotgreeting&amp;quot&amp;gt;Hello World!&amp;lt;/p&amp;gt; split()方法：这个方法可以基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中。分隔符可以是字符串，也可以是一个RegExp对象（这个方法不会讲字符串看成正则表达式），split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回额数组不会超过既定大小。如下例所示： 123var colorText = "red,blue,green,yellow";var color = colorText.split(",");console.log(color); //["red","blue","green","yellow"] localeCompare()方法与操作字符串有关的最后一个方法是localeCompare()，这个方法比较两个字符串，并返回下列值中的一个：1、如果字符串在字母表中应该排在字符串参数之前，则返回一个负数（大多数情况是-1）；2、如果字符串等于字符串参数，则返回0；3、如果字符串在字母表中应该排在字符串参数之后，则返回一个正数（大多数情况下是1）。示例如下： 12var stringValue = "yellow";console.log(stringValue.localeCompare("black")); //1 fromCharCode()方法接收一或多个字符编码，将它们转换为字符串。示例如下： 1console.log(String.fromCharCode(104,101,108,108,111)); //"hello" Global对象所有在全局作用域中定义的属性和方法都是Global对象的属性。除了isNaN()、isFinite()、parseInt()、parseFloat()等方法之外，Global对象还包含其他一些方法这里主要介绍常用的eval()方法，eval()方法就像一个完整的ECMAScript解析器，它只接受一个参数，即要执行的ECMAScript(或JavaScript)字符串，如下所示： 12eval("var msg = 'hello world'");console.log(msg); //hello world Math对象Math对象的属性 属性 说明 Math.E 自然对数的底数，即常量e的值 Math.LN2 2的自然对数 Math.LN10 10的自然对数 Math.LOG2E 以2为底的e对数 Math.LOG10E 以10为底的e对数 Math.PI Π的值 Math.SQRT1_2 1/2的平方根 Math.SQRt2 2的平方根 Math对象的方法min()、max()方法用于确定一组数值中的最小最大值 1234var max = Math.max(3,56,89,74,51,65,12);console.log(max); //89var min = Math.min(3,56,89,74,51,65,12);console.log(min); //3 舍入方法：Math.ceil()、Math.floor()、Math.round()Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数；Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数。 random()方法Math.random()方法返回介于1到1之间的一个随机数，不包括0和1 其他方法 方法 说明 方法 说明 Math.abs(num) 返回num的绝对值 Math.asin(x) 返回x的反正弦值 Math.exp(num) 返回Math.E的num次幂 Math.atan(x) 返回x的反正切值 Math.log(num) 返回num的自然对数 Math.atan2(y,x) 返回y/x的反正切值 Math.pow(num,power) 返回num的power次幂 Math.cos(x) 返回x的余弦值 Math.sqrt(num) 返回num的平方根 Math.sin(x) 返回x的正弦值 Math.acos(x) 返回x的反余弦值 Math.tan(x) 返回x的正切值]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript高级程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量、作用域和内存问题]]></title>
    <url>%2FBlog%2Fposts%2F11.html</url>
    <content type="text"><![CDATA[基本类型和引用类型的值ECMAScript变量可能包含不同数据类型的值：基本类型值和引用类型值。基本类型值：指的是简单的数据段，Undefined、Null、Boolean、Number和String这五种基本数据类型是按值访问的。引用类型值：指的是那些可能由多个值构成的对象，引用类型的值是保存在内存中的对象。与其他语言不同，JavaScript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间，在操作对象时，实际上是在操作对象的引用而不是实际的对象。 动态的属性引用类型的值可以动态地添加属性和方法，也可以改变和删除其属性和方法，但是不能给基本类型的值添加属性 123456789// 为引用类型的值添加属性并给属性赋值var person = new Object();person.name = "Nicholas";console.log(person.name); // "Nicholas"//为基本类型的值添加属性会返回undefined,但是不会报错var name = "Nicholas";name.age = 27;console.log(name.age); // undefined 复制变量值基本类型值与引用类型值复制变量是不同的。如果从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上，这两个变量可以参与任何操作而不会相互影响。 12var num1 = 5;var num2 = num1; // num1与num2的值都是5，但是他们两个相互之间没有影响 如果一个变量向另一个变量复制引用类型的值，同样也会将存储在变量对象中的值复制一份放到为新变量分配的空间中，但是这个值的副本实际上是一个指针，而这个指针指向存储在堆中的一个对象，复制结束后，两个变量实际上将引用同一个对象，改变一个变量，就会影响另一个变量。 1234var obj1 = new Object();var obj2 = obj1;obj1.name = "Nicholas";console.log(obj2.name); // "Nicholas" 传递参数ECMAScript中所有函数的参数都是按值传递的。在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数），在向参数传递引用类型的值时，会把这个值在内存中的地址复制给一个局部变量。 12345678function addTen(num) &#123; num += 10; return num;&#125;var count = 20;var result = addTen(count);console.log(count); // 20console.log(result); // 30 检测类型typeof 可以检测基本数据类型，instanceof可以检测引用数据类型。根据规定，所有引用类型的值都是Object的实例，在检测一个引用类型值和Object构造函数时，instanceof操作符始终会返回true，使用instanceof操作符检测基本类型的值，则该操作符始终会返回false。 执行环境及作用域执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为，每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。全局执行环境是最外围的一个执行环境，在Web浏览器中，全局执行环境被认为是window对象，因此所有全局变量和函数都是作为window对象的属性和方法创建的。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有便俩个和函数定义也随之销毁。当代码在一个环境中执行时，会创建变量对象的一个作用域链，作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象，活动对象在一开始时只包含一个变量，即arguments对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象包含（外部）环境，而再下一个变量对象则来自下一个包含环境，这样，一直延续到全局执行环境，全局执行环境中的变量对象始终都是作用域链中的最后一个对象。标识符解析是沿着作用域链一级一级地搜索标识符的过程，搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直到找到标识符为止（如果找不到标识符，通常会导致错误发生）。 12345678910var color = "blue";function changeColor() &#123; if(color == "blue")&#123; color = "red"; &#125; else &#123; color == "grey"; &#125;&#125;changeColor();console.log("Color is " + color); 1Color is red 上面例子中的函数changColor()的作用域链的中包含两个对象，它自己的变量对象（其中定义着arguments）和全局环境的变量对象。作用域链为它自己的变量对象 ——&gt; 全局环境的变量对象 延长作用域链有些语句可以在作用域链的前端临时增加一个变量对象，该变量对象会在代码执行后被移除，在两种情况下会发生这种现象，出现以下两种现象时，执行流进入下列任何一个语句时，作用域链就会得到加长： try-catch 语句的 catch 块； with 语句。 这两个语句都会在作用域的前端添加一个变量对象，对with语句来说，会将指定的对象添加到作用域链中；对catch语句来说，会创建一个新的变量对象，其中包含的是被抛出的错误对象的声明。如下面的例子所示： 1234567function buildUrl () &#123; var qs = "?debug=true"; with(location)[ var url = href + qs; ] return url;&#125; 在这个例子中，with语句接收的是location对象，因此其变量对象中就包含了location对象的所有属性和方法，而这个变量对象被添加进了作用域链的前端，buildUrl()函数中定义了一个变量qs，当在with语句中引用变量href时（实际引用的是location.href），可以在当前执行环境的变量对象中找到，当引用变量qs时，引用的则是在buildUrl()中定义的那个变量，而该变量位于函数环境的变量对象中，因此with内部的url就成了函数执行环境的一部分，可以作为函数的值返回。 没有块级作用域JavaScript没有块级作用域，在其他类C的语言中，由花括号封闭的代码都有自己的作用域（用ECMAScript的话来说就是他们自己的执行环境）。因而支持根据条件来定义变量，例如，下面的代码在JavaScript中并不会得到想象中的结果： 1234if (true) &#123; var color = "blue";&#125;console.log(color); //"blue" 这个例子，如果是在C、C++或Java中，color会在if语句执行完毕后被销毁，但是在JavaScript中，if语句中的变量声明会将变量添加到当前的执行环境（在这里是全局环境）中。使用for语句时也会发生这样的情况。 1234for (var i=0; i&lt;10;i++) &#123; doSomething(i);&#125;console.log(i); // 10 for循环执行结束后，由for语句创建的i依旧存在于循环外部的执行环境中。解决这种办法ES6使用let声明变量，用let声明可以将作用域限制在当前块中。声明变量：使用var声明的变量会自动被添加进最接近的环境中，在函数内部，最接近的环境就是函数的局部环境，在with语句中，最接近的环境是函数环境，如果初始化变量时没有使用var声明，该变量会自动添加进全局环境。查询标识符：搜索过程从作用域链的前端开始，向上逐级查询给定名字匹配的标识符。如果在局部环境中找到了该标识符，搜索过程停止，变量就绪；如果在局部环境中没有找到该变量名，则继续沿作用域链向上搜索，搜索过程一直追溯到全局环境的变量对象，如果在全局环境中也没有找到这个标识符，则意味着该变量尚未声明。 垃圾收集JavaScript具有自动垃圾收集机制，垃圾收集器跟踪哪个变量有用，哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存，用于标识无用变量的策略主要有以下两种办法：标记清除：垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记，然后，它会去除环境中的变量以及被环境中的变量引用的变量的标记，而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了，最后垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。引用计数：引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给变量时，则这个值的引用次数就是1，如果同一个值又被赋给另一个变量，则该值的引用次数加1；相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1，当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间收回来。]]></content>
      <categories>
        <category>JavaScript高级程序设计</category>
      </categories>
      <tags>
        <tag>JavaScript高级程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线性表]]></title>
    <url>%2FBlog%2Fposts%2F10.html</url>
    <content type="text"><![CDATA[线性表线性表：零个或多个数据元素的有限序列 定义若将线性表记为（a(1),…,a(i-1),a(i),a(i+1),…a(n)）,则表中a(i-1)领先于a(i),a(i)领先于a(i+1)，称a(i-1)是a(i)的直接前驱元素，a(i+1)是a(i)的直接后继元素，当i=1,2,…,n-1时，a(i)有且仅有一个直接后继元素，当i=2,3,…,n时，a(i)有且仅有一个直接前驱元素。线性表元素的个数n（n&gt;=0）定义线性表的长度，当n=0时，称为空表。 线性表的抽象数据类型定义如下： 123456789101112131415ADT 线性表（List）Data 线性表的数据对象集合为&#123;a1,a2,...,an&#125;，每个元素的类型均为DataType。其中，除第一个元素a1外， 每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。 数据元素之间的关系是一对一的关系。Operation InitList(*L)： 初始化操作，建立一个空的线性表L。 ListEmpty(L)： 若线性表为空，返回true，否则返回false。 ClearList(*L)：将线性表清空。 GetElem(L,i,*e)：将线性表L中的第i个位置元素值返回给e。 LocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。 ListInsert(*L,i,e)：在线性表L中的第i个位置插入新元素e。 ListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。 ListLength(L)：返回线性表L的元素个数。endADT 对于不同的应用，线性表的基本操作是不同的，上述操作是最基本的，对于实际问题中涉及的关于线性表的更复杂操作，完全可以用这些基本操作的组合来实现。示例：比如，要实现两个线性表集合A和B的并集操作。即要使得集合A=A∪B，说白了，就是把存在集合B中的但不存在A中的数据元素插入到A中即可。假设La表示集合A，Lb表示集合B，则实现的代码如下： 1234567891011121314/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/void union(List *La,List Lb)&#123; int La_len,Lb_len,i; ElemType e; /*声明与La和Lb相同的数据元素e */ La_len = ListLength(La); /*求线性表的长度*/ Lb_len = ListLength(Lb) for (i=1; i&lt;=Lb_len; i++) &#123; GetElem(Lb,i,e); /*取Lb中第i个数据元素赋给e*/ if(!LocateElem(La,e,equal)) /*La中不存在和e相同数据元素*/ &#123; ListInsert(La,++La_len,e); /*插入*/ &#125; &#125;&#125; 线性表的顺序存储结构线性表的顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。线性表的顺序存储的结构代码 1234567define MAXSIZE 20 /*存储空间初始分配量*/typedef int ElemType /*ElemType 类型根据实际情况而定，这里假设为int*/typedef struct&#123; ElemType data[MAXSIZE]; /*数组存储数据元素，最大值为MAXSIZE*/ int length; /*线性表当前长度*/&#125;Sqlist； 顺序存储结构需要三个属性： 存储空间的起始位置：数组data，它的存储位置就是存储空间的存储位置。 线性表的最大存储容量：数组长度MaxSize。 线性表的当前长度：length。 注意：线性表的长度与数组的长度是不一样的，线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的；数组的长度指的是线性表存放线性表的存储空间的长度，在任意时刻，线性表的长度小于等于数组的长度。 顺序存储结构的插入与删除 获得元素操作 对于顺序存储结构来说，如果我们要实现GetElem操作，只要i的数值在数组下标范围内，就是把数组第i-1下标的值返回即可。示例代码如下： 1234567891011121314151617#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0typedef int Status;/*Status 是函数的类型，其值是函数结果状态代码，如OK等*//*初始条件：顺序线性表 L 已存在，1&lt;=i&lt;=ListLength(L)*//*操作结果：用e返回L中第i个数据元素的值*/Status GetElem (SqList L,int i,ElemType *e)&#123; if(L.length==0 || i&lt;1 || i&gt;L.Length) &#123; return ERROR; &#125; *e=L.data[i-1]; return OK;&#125; 插入操作插入算法的思路： 如果插入位置不合理，抛出异常； 如果线性表长度大于等于数组长度，则抛出异常或动态增加容量 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一位 将要插入元素填入位置i处 表长加1实现代码如下：/* 初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L)/ / 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1*/Status ListInsert (SqList *L,int i,ElemType e) { int k; if (ListLength(L)==MAXSIZE) /* 顺序线性表已经满 / { return ERROR; } if (i&lt;1 || i&gt;ListLength+1) / 当i不在范围内时/ { return ERROR; } if (i&lt;=ListLength) / 若插入数据位置不在表尾 */ { return ERROR; }}]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构绪论]]></title>
    <url>%2FBlog%2Fposts%2F9.html</url>
    <content type="text"><![CDATA[基本概念合术语数据数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 数据元素数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据项数据项：一个数据元素可以由若干个数据项组成；数据项是数据不可分割的最小单位。但是在真正讨论问题时，数据元素才是数据结构中建立数据模型的着眼点。 数据对象数据对象：是性质相同的数据元素的集合，是数据的子集。 数据结构数据对象：是相互之间存在一种或多种特定关系的数据元素的集合。 逻辑结构与物理结构逻辑结构集合结构：集合结构中的数据元素除了同属于一个集合外，他们之间没有其他联系，类似于数学中的集合线性结构：线性结构中的数据元素之间是一对一的关系树形结构：树形结构的数据元素之间存在一种一对多的层次关系图形结构：图形结构之间的数据元素是多对多的关系 物理结构（存储结构）物理结构：是指数据的逻辑结构在计算机中的存储形式数据元素的存储结构有两种：顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的 抽象数据类型数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称在C语言中，按照取值的不同，数据类型可以分为两类原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等结构类型：由若干个类型组合而成，是可以再分解的。例如：整形数组是由若干个整型数据组成的抽象是指抽象出事物具有的普遍性的本质。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象高级编程]]></title>
    <url>%2FBlog%2Fposts%2F8.html</url>
    <content type="text"><![CDATA[数据封装、继承和多态只是面向对象程序设计中最基础的3个概念。在Python中，面向对象还有很多高级特性，允许我们写出非常强大的功能，我们会讨论多重继承、定制类、元类等概念。 使用slotsslots是用来限制class实例能添加的属性 12class Student(object): __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称 测试结果L: 1234567&gt;&gt;&gt; s = Student() # 创建新的实例&gt;&gt;&gt; s.name = 'Michael' # 绑定属性'name'&gt;&gt;&gt; s.age = 25 # 绑定属性'age'&gt;&gt;&gt; s.score = 99 # 绑定属性'score'Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'Student' object has no attribute 'score' 由于’score’没有被放到slots中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。使用slots要注意，slots定义的属性仅对当前类实例起作用，对继承的子类是不起作用的： 使用@property在绑定属性时，如果我们直接向下面这样把属性暴露出去，虽然写起来简单，但是，没办法检查参数，导致成绩可以随便改 12s = Student()s.score = 9999 这显然不合逻辑。为了限制score的范围，可以通过一个set_score()方法来设置成绩，再通过一个get_score()来获取成绩，这样，在set_score()方法里，就可以检查参数： 1234567891011class Student(object): def get_score(self): return self._score def set_score(self, value): if not isinstance(value, int): raise ValueError('score must be an integer!') if value &lt; 0 or value &gt; 100: raise ValueError('score must between 0 ~ 100!') self._score = value 现在，对任意的Student实例进行操作，就不能随心所欲地设置score了： 12345678&gt;&gt;&gt; s = Student()&gt;&gt;&gt; s.set_score(60) # ok!&gt;&gt;&gt; s.get_score()60&gt;&gt;&gt; s.set_score(9999)Traceback (most recent call last): ...ValueError: score must between 0 ~ 100! 但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的@property装饰器就是负责把一个方法变成属性调用的： 12345678910111213class Student(object): @property def score(self): return self._score @score.setter def score(self, value): if not isinstance(value, int): raise ValueError('score must be an integer!') if value &lt; 0 or value &gt; 100: raise ValueError('score must between 0 ~ 100!') self._score = value @property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作： 12345678&gt;&gt;&gt; s = Student()&gt;&gt;&gt; s.score = 60 # OK，实际转化为s.set_score(60)&gt;&gt;&gt; s.score # OK，实际转化为s.get_score()60&gt;&gt;&gt; s.score = 9999Traceback (most recent call last): ...ValueError: score must between 0 ~ 100! 注意到这个神奇的@property，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性： 12345678910111213class Student(object): @property def birth(self): return self._birth @birth.setter def birth(self, value): self._birth = value @property def age(self): return 2015 - self._birth 上面的birth是可读写属性，而age就是一个只读属性，因为age可以根据birth和当前时间计算出来。@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。 多重继承继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能，例如Animal类层的设计，假设我们要实现以下4种动物： Dog - 狗狗； Bat - 蝙蝠； Parrot - 鹦鹉； Ostrich - 鸵鸟。如果按照哺乳动物与鸟类归类，可以将Dog与Bat归为一类，Parrot与Ostrich归为一类，但是如果我们再按照能跑与能飞来分类，将非常麻烦，所以python设计多重继承 我们要给动物加上Runable与Flyable的功能，只需要定义好Runnable与Flyable的类 1234567class Runnable(object): def run(self): print('Running...')class Flyable(object): def fly(self): print('Flying...') 对于需要Runnable功能的动物，就多继承一个Runnable，例如Dog： 12class Dog(Mammal, Runnable): pass 对于需要Flyable功能的动物，就多继承一个Flyable，例如Bat： 12class Bat(Mammal, Flyable): pass 通过多重继承，一个子类就可以同时获得多个父类的所有功能。 MixIn在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。类似的，你还可以定义出肉食动物CarnivorousMixIn和植食动物HerbivoresMixIn，让某个动物同时拥有好几个MixIn： 12class Dog(Mammal, RunnableMixIn, CarnivorousMixIn): pass MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。 Python自带的很多库也使用了MixIn。举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务来。比如，编写一个多进程模式的TCP服务，定义如下： 12class MyTCPServer(TCPServer, ForkingMixIn): pass 编写一个多线程模式的UDP服务，定义如下： 12class MyUDPServer(UDPServer, ThreadingMixIn): pass 如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixIn： 12class MyTCPServer(TCPServer, CoroutineMixIn): pass 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。由于Python允许使用多重继承，因此，MixIn就是一种常见的设计。只允许单一继承的语言（如Java）不能使用MixIn的设计。 定制类str我们先定义一个Student类，打印一个实例： 123456&gt;&gt;&gt; class Student(object):... def __init__(self, name):... self.name = name...&gt;&gt;&gt; print(Student('Michael'))&lt;__main__.Student object at 0x109afb190&gt; 打印出一堆&lt;main.Student object at 0x109afb190&gt;，不好看。怎么才能打印得好看呢？只需要定义好str()方法，返回一个好看的字符串就可以了： 12345678&gt;&gt;&gt; class Student(object):... def __init__(self, name):... self.name = name... def __str__(self):... return 'Student object (name: %s)' % self.name...&gt;&gt;&gt; print(Student('Michael'))Student object (name: Michael) 这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。但是细心的朋友会发现直接敲变量不用print，打印出来的实例还是不好看： 123&gt;&gt;&gt; s = Student('Michael')&gt;&gt;&gt; s&lt;__main__.Student object at 0x109afb310&gt; 这是因为直接显示变量调用的不是str()，而是repr()，两者的区别是str()返回用户看到的字符串，而repr()返回程序开发者看到的字符串，也就是说，repr()是为调试服务的。 解决办法是再定义一个repr()。但是通常str()和repr()代码都是一样的，所以，有个偷懒的写法： 123456class Student(object): def __init__(self, name): self.name = name def __str__(self): return 'Student object (name=%s)' % self.name __repr__ = __str__ iter如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个iter()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。 我们以斐波那契数列为例，写一个Fib类，可以作用于for循环： 123456789101112class Fib(object): def __init__(self): self.a, self.b = 0, 1 # 初始化两个计数器a，b def __iter__(self): return self # 实例本身就是迭代对象，故返回自己 def __next__(self): self.a, self.b = self.b, self.a + self.b # 计算下一个值 if self.a &gt; 100000: # 退出循环的条件 raise StopIteration() return self.a # 返回下一个值 现在，试试把Fib实例作用于for循环： 1234567891011&gt;&gt;&gt; for n in Fib():... print(n)...11235...4636875025 getitemFib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素： 1234&gt;&gt;&gt; Fib()[5]Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: 'Fib' object does not support indexing 要表现得像list那样按照下标取出元素，需要实现getitem()方法： 123456class Fib(object): def __getitem__(self, n): a, b = 1, 1 for x in range(n): a, b = b, a + b return a 现在，就可以按下标访问数列的任意一项了： 12345678910111213&gt;&gt;&gt; f = Fib()&gt;&gt;&gt; f[0]1&gt;&gt;&gt; f[1]1&gt;&gt;&gt; f[2]2&gt;&gt;&gt; f[3]3&gt;&gt;&gt; f[10]89&gt;&gt;&gt; f[100]573147844013817084101]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象编程]]></title>
    <url>%2FBlog%2Fposts%2F7.html</url>
    <content type="text"><![CDATA[类和实例面向对象最重要的概念就是类（Class）和实例（Instance），类是抽象的模板，实例是根据类创建出来的一个个具体的“对象”。以Student类为例，定义Student类，定义类的关键字是class 12class Student(object): pass class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的： 12345&gt;&gt;&gt; bart = Student()&gt;&gt;&gt; bart&lt;__main__.Student object at 0x10a67a590&gt;&gt;&gt;&gt; Student&lt;class '__main__.Student'&gt; 可以看到，变量bart指向的就是一个Student的实例，后面的0x10a67a590是内存地址，每个object的地址都不一样，而Student本身则是一个类。由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的init方法，在创建实例的时候，就把name，score等属性绑上去： 12345class Student(object): def __init__(self, name, score): self.name = name self.score = score 注意到init方法的第一个参数永远是self，表示创建的实例本身，因此，在init方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。有了init方法，在创建实例的时候，就不能传入空的参数了，必须传入与init方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去： 12345&gt;&gt;&gt; bart = Student('Bart Simpson', 59)&gt;&gt;&gt; bart.name'Bart Simpson'&gt;&gt;&gt; bart.score59 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。 数据封装数据封装即是类的方法 12345678lass Student(object): def __init__(self, name, score): self.name = name self.score = score def print_score(self): print('%s: %s' % (self.name, self.score)) 在Student这个类中定义了print_score方法；和普通函数一样，要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入。 12&gt;&gt;&gt; bart.print_score()Bart Simpson: 59 练习1:在Student类里定义get_grade方法，成绩在90分以上返回这个人的名字和A，60到90之间为B，60以下为C 1234567891011121314151617# -*- coding: utf-8 -*-class Student(object): def __init__(self, name, score): self.name = name self.score = score def get_grade(self): if self.score &gt;= 90: return 'A' elif self.score &gt;= 60: return 'B' else: return 'C'lisa = Student('Lisa', 99)bart = Student('Bart', 59)print(lisa.name, lisa.get_grade())print(bart.name, bart.get_grade()) 输出结果如下： 12Lisa A Bart C 总结类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同 访问限制在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的name、score属性 123456&gt;&gt;&gt; bart = Student('Bart Simpson', 59)&gt;&gt;&gt; bart.score59&gt;&gt;&gt; bart.score = 99&gt;&gt;&gt; bart.score99 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 __ ，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改,但是如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法 1234567891011121314151617class Student(object): def __init__(self, name, score): self.__name = name self.__score = score def get_name(self): #通过get_name获取内部名字等 return self.__name def get_score(self): return self.__score def set_score(self, score): #通过set_score修改内部变量，用这种办法，可以对参数进行检查，避免传入无效的参数 if 0 &lt;= score &lt;= 100: self.__score = score else: raise ValueError('bad score') 需要注意的是，在Python中，变量名类似xxx的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用name、score这样的变量名。有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问name是因为Python解释器对外把name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量： 12&gt;&gt;&gt; bart._Student__name'Bart Simpson' 但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名。总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。练习2：请把下面的Student对象的gender字段对外隐藏起来，用get_gender()和set_gender()代替，并检查参数有效性 12345678910111213141516171819# -*- coding: utf-8 -*-class Student(object): def __init__(self, name, gender): self.name = name self.__gender = gender def get_gender(self): return self.__gender def set_gender(self,gender): self.__gender = gender# 测试:bart = Student('Bart', 'male')if bart.get_gender() != 'male': print('测试失败!')else: bart.set_gender('female') if bart.get_gender() != 'female': print('测试失败!') else: print('测试成功!') 测试结果： 1测试成功! 继承和多态继承在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。比如，我们已经编写了一个名为Animal的class，有一个run()方法可以直接打印，当我们需要编写Dog和Cat类时，就可以直接从Animal类继承 123456789class Animal(object): def run(self): print('Animal is running...')class Dog(Animal): passclass Cat(Animal): pass 对于Dog来说，Animal就是它的父类，对于Animal来说，Dog就是它的子类。Cat和Dog类似。继承就是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法 123456&gt;&gt;&gt; dog = Dog()&gt;&gt;&gt; dog.run()&gt;&gt;&gt; cat = Cat()&gt;&gt;&gt; cat.run()Animal is running...Animal is running... 不仅可以实现继承，同时子类可以对代码进行改进与修改 1234567891011&gt;&gt;&gt; class Dog(Animal):&gt;&gt;&gt; def run(self):&gt;&gt;&gt; print('Dog is running...')&gt;&gt;&gt; class Cat(Animal):&gt;&gt;&gt; def run(self):&gt;&gt;&gt; print('Cat is running...')Dog is running...Cat is running... 子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()，在代码运行的时候，总是会调用子类的run(),即继承的另一个好处：多态。 多态123456789101112&gt;&gt;&gt; def run_twice(animal):&gt;&gt;&gt; animal.run()&gt;&gt;&gt; animal.run()&gt;&gt;&gt; run_twice(Animal())Animal is running...Animal is running...&gt;&gt;&gt; run_twice(Dog())Dog is running...Dog is running...&gt;&gt;&gt; run_twice(Cat())Cat is running...Cat is running... 对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、还是Cat对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树 获取对象信息使用type() 1 基本类型可以用type()判断 123456&gt;&gt;&gt; type(123)&lt;class 'int'&gt;&gt;&gt;&gt; type('str')&lt;class 'str'&gt;&gt;&gt;&gt; type(None)&lt;type(None) 'NoneType'&gt; 2 如果一个变量指向函数或者类，也可以用type()判断 1234&gt;&gt;&gt; type(abs)&lt;class 'builtin_function_or_method'&gt;&gt;&gt;&gt; type(a)&lt;class '__main__.Animal'&gt; 3 判断一个对象是否是函数可以使用types模块中定义的常量 123456789101112&gt;&gt;&gt; import types&gt;&gt;&gt; def fn():... pass...&gt;&gt;&gt; type(fn)==types.FunctionTypeTrue&gt;&gt;&gt; type(abs)==types.BuiltinFunctionTypeTrue&gt;&gt;&gt; type(lambda x: x)==types.LambdaTypeTrue&gt;&gt;&gt; type((x for x in range(10)))==types.GeneratorTypeTrue 使用isinstance()对于class的继承关系来说，使用types()就很不方便，为了判断class的类型，可以使用isinstance()函数: 1 对于如下继承关系的函数1object -&gt; Animal -&gt; Dog -&gt; Husky 可以创建3种类型的对象，然后判断，isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上 1234567891011&gt;&gt;&gt; a = Animal()&gt;&gt;&gt; d = Dog()&gt;&gt;&gt; h = Husky()&gt;&gt;&gt; isinstance(h, Husky)True&gt;&gt;&gt; isinstance(h, Dog)True&gt;&gt;&gt; isinstance(d, Dog) and isinstance(d, Animal)True&gt;&gt;&gt; isinstance(d, Husky)False 2 可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple:1234&gt;&gt;&gt; isinstance([1, 2, 3], (list, tuple))True&gt;&gt;&gt; isinstance((1, 2, 3), (list, tuple))True 使用dir()dir()函数可以获得一个对象的所有属性和方法，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法 12&gt;&gt;&gt; dir('ABC')['__add__', '__class__',..., '__subclasshook__', 'capitalize', 'casefold',..., 'zfill'] 类似xxx的属性和方法在Python中都是有特殊用途的，比如len方法返回长度。在Python中，如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的len()方法，所以，下面的代码是等价的： 1234&gt;&gt;&gt; len('ABC')3&gt;&gt;&gt; 'ABC'.__len__()3 我们自己写的类，如果也想用len(myObj)的话，就自己写一个len()方法： 1234567&gt;&gt;&gt; class MyDog(object):... def __len__(self):... return 100...&gt;&gt;&gt; dog = MyDog()&gt;&gt;&gt; len(dog)100 仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态： 123456789101112131415161718192021222324&gt;&gt;&gt; class MyObject(object):... def __init__(self):... self.x = 9... def power(self):... return self.x * self.x...&gt;&gt;&gt; obj = MyObject()&gt;&gt; hasattr(obj, 'x') # 有属性'x'吗？True&gt;&gt;&gt; obj.x9&gt;&gt;&gt; hasattr(obj, 'y') # 有属性'y'吗？False&gt;&gt;&gt; setattr(obj, 'y', 19) # 设置一个属性'y'&gt;&gt;&gt; hasattr(obj, 'y') # 有属性'y'吗？True&gt;&gt;&gt; getattr(obj, 'y') # 获取属性'y'19&gt;&gt;&gt; obj.y # 获取属性'y'19&gt;&gt;&gt; getattr(obj, 'z') # 获取属性'z',试图获取不存在的属性，会抛出AttributeError的错误Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'MyObject' object has no attribute 'z' 可以传入一个default参数，如果属性不存在，就返回默认值： 12&gt;&gt;&gt; getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404404 也可以获得对象的方法： 123456789&gt;&gt;&gt; hasattr(obj, 'power') # 有属性'power'吗？True&gt;&gt;&gt; getattr(obj, 'power') # 获取属性'power'&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;&gt;&gt;&gt; fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn&gt;&gt;&gt; fn # fn指向obj.power&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;&gt;&gt;&gt; fn() # 调用fn()与调用obj.power()是一样的81 实例属性和类属性由于Python是动态语言，根据类创建的实例可以任意绑定属性。给实例绑定属性的方法是通过实例变量，或者通过self变量： 123456class Student(object): def __init__(self, name): self.name = names = Student('Bob')s.score = 90 但是，如果Student类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归Student类所有： 12class Student(object): name = 'Student' 当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下： 12345678910111213141516&gt;&gt;&gt; class Student(object):... name = 'Student'...&gt;&gt;&gt; s = Student() # 创建实例s&gt;&gt;&gt; print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性Student&gt;&gt;&gt; print(Student.name) # 打印类的name属性Student&gt;&gt;&gt; s.name = 'Michael' # 给实例绑定name属性&gt;&gt;&gt; print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性Michael&gt;&gt;&gt; print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问Student&gt;&gt;&gt; del s.name # 如果删除实例的name属性&gt;&gt;&gt; print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了Student 练习:为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加： 123456789101112131415161718192021# -*- coding: utf-8 -*-class Student(object): count = 0 def __init__(self, name): self.name = name Student.count += 1 # 测试:if Student.count != 0: print('测试失败!')else: bart = Student('Bart') if Student.count != 1: print('测试失败!') else: lisa = Student('Bart') if Student.count != 2: print('测试失败!') else: print('Students:', Student.count) print('测试通过!') 12Students: 2 测试通过! 实例属性属于各个实例所有，互不干扰；类属性属于类所有，所有实例共享一个属性；不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归函数]]></title>
    <url>%2FBlog%2Fposts%2F4.html</url>
    <content type="text"><![CDATA[递归函数在函数内部，可以调用其他函数，如果一个函数在内部调用自身本身，这个函数就是递归函数举个例子，我们来计算阶乘n! = 1 x 2 x 3 x … x n，用函数fact(n)表示，可以看出：fact(n) = n! = 1 x 2 x 3 x … x (n-1) x n = (n-1)! x n = fact(n-1) x n所以，fact(n)可以表示为n x fact(n-1)，只有n=1时需要特殊处理。于是，fact(n)用递归的方式写出来就是： 12345678910def fact(n): if n==1: return 1 return n * fact(n - 1)&gt;&gt;&gt; fact(1)1&gt;&gt;&gt; fact(5)120&gt;&gt;&gt; fact(100)93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000 递归函数的优点是定义简单，逻辑清晰，使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出 尾优化解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以把循环看成一种特殊的尾递归函数也是可以的尾递归是指，在函数返回的时候，调用自身本身，并且eturn语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中： 1234567def fact(n): return fact_iter(n, 1)def fact_iter(num, product): if num == 1: return product return fact_iter(num - 1, num * product) 可以看到，return fact_iter(num - 1, num * product) 仅返回递归函数本身，num - 1和 num * product在函数调用前就会被计算，不影响函数调用。fact(5)对应的fact_iter(5, 1)的调用如下： 123456===&gt; fact_iter(5, 1)===&gt; fact_iter(4, 5)===&gt; fact_iter(3, 20)===&gt; fact_iter(2, 60)===&gt; fact_iter(1, 120)===&gt; 120 尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数式编程]]></title>
    <url>%2FBlog%2Fposts%2F6.html</url>
    <content type="text"><![CDATA[python是面向对象编程的程序语言函数就是面向过程的程序设计的基本单元。函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出。 高阶函数变量可以指向函数既可以将函数赋值结果给变量，也可以将函数本身赋值给变量，即变量可以指向函数示例如下： 123456&gt;&gt;&gt; x = abs(-10)&gt;&gt;&gt; x10&gt;&gt;&gt; f=abs&gt;&gt;&gt; f&lt;built-in function abs&gt; 变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同 123&gt;&gt;&gt; f = abs&gt;&gt;&gt; f(-10)10 传入函数既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。一个最简单的高阶函数如下： 12def add(x, y, f): return f(x) + f(y) 编写高阶函数，就是让函数的参数能够接收别的函数。 map/reducePython内建了map()和reduce()函数。map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回示例如下： 12345678&gt;&gt;&gt; def f(x):... return x * x...&gt;&gt;&gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])&gt;&gt;&gt; list(r)[1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; tuple(r)(1, 4, 9, 16, 25, 36, 49, 64, 81) map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数或者tuple()函数让它把整个序列都计算出来并返回一个listreduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是： 1reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4) 练习1: 利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：[‘adam’, ‘LISA’, ‘barT’]，输出：[‘Adam’, ‘Lisa’, ‘Bart’]： 12345678&gt;&gt;&gt; # -*- coding: utf-8 -*-&gt;&gt;&gt; def normalize(name):&gt;&gt;&gt; return name.capitalize()&gt;&gt;&gt;# 测试:&gt;&gt;&gt; L1 = ['adam', 'LISA', 'barT']&gt;&gt;&gt; L2 = list(map(normalize, L1))&gt;&gt;&gt; print(L2)['Adam', 'Lisa', 'Bart'] 练习2: Python提供的sum()函数可以接受一个list并求和，请编写一个prod()函数，可以接受一个list并利用reduce()求积： 1234567891011&gt;&gt;&gt; # -*- coding: utf-8 -*-&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def prod(L):&gt;&gt;&gt; return reduce(lambda x, y: x * y, L)&gt;&gt;&gt; print('3 * 5 * 7 * 9 =', prod([3, 5, 7, 9]))&gt;&gt;&gt; if prod([3, 5, 7, 9]) == 945:&gt;&gt;&gt; print('测试成功!')&gt;&gt;&gt; else:&gt;&gt;&gt; print('测试失败!')3 * 5 * 7 * 9 = 945 测试成功! filterPython内建的filter()函数用于过滤序列,用filter()这个高阶函数，关键在于正确实现一个“筛选”函数。filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list.示例如下：用filter求素数计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：首先，列出从2开始的所有自然数，构造一个序列：2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取新序列的第一个数5，然后用5把序列的5的倍数筛掉：7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …不断筛下去，就可以得到所有的素数。 123456789101112131415161718192021222324# 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：def _odd_iter(): n = 1 while True: n = n + 2 yield n# 然后定义一个筛选函数：def _not_divisible(n): return lambda x: x % n &gt; 0# 最后，定义一个生成器，不断返回下一个素数：def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列#由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 练习3: 回数是指从左向右读和从右向左读都是一样的数，例如 12321 ， 909 。请利用 filter() 滤掉非回数 12345678方案一:def is_palindrome(n): nn = str(n) #转成字符串 return nn == nn[::-1] #反转字符串并对比原字符串返回true/falseprint list(filter(is_palindrome,range(1,1000)))方案二:print list(filter(lambda n : str(n)==str(n)[::-1],range(1,1000))) #str(n)同上 sortedsorted()也是一个高阶函数，用sorted()排序的关键在于实现一个映射函数练习4：假设我们用一组tuple表示学生名字和成绩：L = [(‘Bob’, 75), (‘Adam’, 92), (‘Bart’, 66), (‘Lisa’, 88)]请用sorted()对上述列表分别按名字排序： 123456# -*- coding: utf-8 -*-L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]def by_name(t): return t[0].lower()L2 = sorted(L, key=by_name)print(L2) 输出结果如下： 1[('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)] 再按成绩从高到低排序： 123456# -*- coding: utf-8 -*-L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]def by_score(t): return t[1]L2 = sorted(L, key=by_score)print(L2) 输出结果如下： 1[('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)] 返回函数函数作为返回值高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回示例如下： 12345678910111213141516&gt;&gt;&gt; def lazy_sum(*args):&gt;&gt;&gt; def sum():&gt;&gt;&gt; ax = 0&gt;&gt;&gt; for n in args:&gt;&gt;&gt; ax = ax + n&gt;&gt;&gt; return ax&gt;&gt;&gt; return sum&gt;&gt;&gt; f = lazy_sum(1, 3, 5, 7, 9) #当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数&gt;&gt;&gt; f&lt;function lazy_sum.&lt;locals&gt;.sum at 0x101c6ed90&gt;&gt;&gt;&gt; f() #调用函数f时，才真正计算求和的结果25 &gt;&gt;&gt; f1 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f2 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f1==f2 #f1()和f2()的调用结果互不影响。False 闭包注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。我们来看一个例子： 123456789def count(): fs = [] for i in range(1, 4): def f(): return i*i fs.append(f) return fsf1, f2, f3 = count() 在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是： 123456&gt;&gt;&gt; f1()9&gt;&gt;&gt; f2()9&gt;&gt;&gt; f3()9 全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。练习5：利用闭包返回一个计数器函数，每次调用它返回递增整数 1234567891011121314151617# -*- coding: utf-8 -*-def createCounter(): s = [0] def counter(): s[0] = s[0]+1 return s[0] return counter# 测试:counterA = createCounter()print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5counterB = createCounter()if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]: print('测试通过!')else: print('测试失败!')1 2 3 4 5 测试通过! 匿名函数关键字lambda表示匿名函数，冒号前面的x表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数示例如下： 12345&gt;&gt;&gt; f = lambda x: x * x&gt;&gt;&gt; f&lt;function &lt;lambda&gt; at 0x101c6ef28&gt;&gt;&gt;&gt; f(5)25 装饰器12345678910&gt;&gt;&gt; def now():... print('2015-3-25')...&gt;&gt;&gt; f = now #由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数&gt;&gt;&gt; f()2015-3-25&gt;&gt;&gt; now.__name__ #函数对象有一个__name__属性，可以拿到函数的名字'now'&gt;&gt;&gt; f.__name__'now' 假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。简单例子如下： 123456789import functoolsdef log(text): def decorator(func): @functools.wraps(func) def wrapper(*args, **kw): print('%s %s():' % (text, func.__name__)) return func(*args, **kw) return wrapper return decorator 具体见廖雪峰学习网站，这里不具体介绍装饰器]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级特性]]></title>
    <url>%2FBlog%2Fposts%2F5.html</url>
    <content type="text"><![CDATA[切片取一个list或tuple的部分元素是非常常见的操作，例如，一个lst如下： 1L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack'] 用切片可以选择任意位置取元素 123L[0:3] #取前三个元素L[:] #全部复制L[-2:] #从倒数第二个向后取 输出结果如下所示： 123['Michael', 'Sarah', 'Tracy']['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']['Bob', 'Jack']] 同理字符串也可以这样操作 迭代Python的for循环抽象程度要高于C的for循环，因为Python的for循环不仅可以用在list或tuple上，还可以用在其他可迭代对象上。举例：dict迭代 123d = &#123;'a': 1, 'b': 2, 'c': 3&#125;for key in d: print(key) 输出结果为： 123acb 因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断： 123&gt;&gt;&gt; from collection import Iterable&gt;&gt;&gt; isinstance('abc',Iterable) #是否可迭代&gt;&gt;&gt; True 若对list实现类似Java那样的下标循环，可以使用Python内置的enumerate函数可以把一个list变成索引-元素对 12345&gt;&gt;&gt; for i, value in enumerate(['A', 'B', 'C']):&gt;&gt;&gt; print(i, value)0 A1 B2 C 请使用迭代查找一个list中最小和最大值，并返回一个tuple：自己写的示例代码 1234567891011def findMinAndMax(L):if L==[]: return(None,None) else: min=max=L[0] for i in L: if i&lt;min: min=i if i&gt;max: max=i return(min,max) 列表生成式列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))： 12&gt;&gt;&gt; list(range(1, 11))[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环： 123456&gt;&gt;&gt; L = []&gt;&gt;&gt; for x in range(1, 11):... L.append(x * x)...&gt;&gt;&gt; L[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list： 12&gt;&gt;&gt; [x*x for x in range(1,11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100] for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方： 12&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100] 还可以使用两层循环，可以生成全排列： 12&gt;&gt;&gt; [m + n for m in 'ABC' for n in 'XYZ']['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value,列表生成式也可以使用两个变量来生成list： 12&gt;&gt; d = &#123;'x': 'A', 'y': 'B', 'z': 'C' &#125;&gt;&gt;&gt; [k + '=' + v for k, v in d.items()] 输出结果如下： 1['y=B', 'x=A', 'z=C'] 练习题： L1为 [‘Hello’, ‘World’, 18, ‘Apple’, None]，输出 L2为 [‘hello’, ‘world’, ‘apple’]代码如下： 1L2 = [i.lower() for i in L1 if isinstance(i, str)==True] 生成器通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator： 123456&gt;&gt; L = [x * x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt; 创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值： 1234&gt;&gt;&gt; next(g)0&gt;&gt;&gt; next(g)1 generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误不想一个一个打印也可以用for循环进行打印 1234567891011121314&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; for n in g:... print(n)0149162536496481 第二种创建generator的办法是使用yield关键字generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。练习题：杨辉三角 12345 1 1 1 1 2 1 1 3 3 11 4 6 4 1 把每一行看做一个list，试写一个generator，不断输出下一行的list： 1234567891011def triangles(): a=[1] while True: yield a a=[sum(i) for i in zip([0]+a,a+[0])]n=0for t in triangles(): print(t) n=n+1 if n == 10: break 迭代器凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。Python的for循环本质上就是通过不断调用next()函数实现的，例如： 12for x in [1, 2, 3, 4, 5]: pass 实际上完全等价于： 12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 基础]]></title>
    <url>%2FBlog%2Fposts%2F2.html</url>
    <content type="text"><![CDATA[数据类型和变量数据类型数据类型分为整数、浮点数、字符串、布尔值和空值 变量变量可以是数字与任意数据类型 字符编码字符编码使用UTF-8标准 Python的字符串Python的字符串支持多语言，对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。Python对bytes类型的数据用带b前缀的单引号或双引号表示： 1x = b'ABC' 注意：区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节 以Unicode表示的str通过encode()方法可以编码为指定的bytes英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。在bytes中，无法显示为ASCII字符的字节，用\x##显示。反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法len()函数计算的是str的字符数，如果换成bytes，len()函数计算字节数 格式化运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。常见的占位符有：%d（整数） %f（浮点数） %s（字符串） %x（十六进制整数）还有一种方式是format()方法使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多示例如下： 1'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'.format('小明', 17.125) list和tuplelistPython内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。示例如下： 1classmates = ['Michael', 'Bob', 'Tracy'] 变量classmates就是一个list，list的索引是从0开始的，最后一个元素的索引是len(classmates)-1除此之外，还可以用-1做索引,以此类推-2、-3等等 12&gt;&gt;&gt;classmates[-1]'Tracy' list中的经常使用的方法1.append()list是一个可变的有序表，所以，可以往list中追加元素到末尾 123&gt;&gt;&gt; classmates.append('Adm')&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy', 'Adm'] 2.insert()list可以把元素插入到指定的位置，比如索引号为1的位置 123&gt;&gt;&gt; classmates.insert(1, 'Jack')&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy', 'Adm'] 3.pop()删除list末尾的元素 123&gt;&gt;&gt; classmates.pop()&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy'] 123&gt;&gt;&gt; classmates.pop(1)&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] pop(i)是删除指定位置的元素 把某个元素替换成别的元素 123&gt;&gt;&gt; classmates[1] = 'Sarah'&gt;&gt;&gt; classmates['Michael', 'Sarah', 'Tracy'] list元素也可以是另一个list，比如： 123&gt;&gt;&gt; s = ['python', 'java',['asp', 'php'], 'scheme']&gt;&gt;&gt; len(s)4 tupletuple是另一种有序列表即元祖，与list非常类似，但是tuple一旦初始化后就不能修改。 1&gt;&gt;&gt; classmates('A', 'B', 'C') 现在这个classmates不能修改了，没有append，insert，pop等方法，只能正常使用classmates[0],classmates[-1],但是不能赋值成其他元素。使得代码更安全定义只有一个元素的tuple时必须加逗号，避免歧义 123456&gt;&gt;&gt; t = (1)&gt;&gt;&gt; t1&gt;&gt;&gt; t = (1,)&gt;&gt;&gt; t(1) 这是因为Python规定，这种情况下，按小括号进行计算，计算结果自然是1。tuple里也可以定义可变的list 12345&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])&gt;&gt;&gt; t[2][0] = 'X'&gt;&gt;&gt; t[2][1] = 'Y'&gt;&gt;&gt; t('a', 'b', ['X', 'Y']) 条件判断if、 if else、 if elif else if语句1234age = 20if age &gt;= 18: print('your age is', age) print('adult') if else语句1234567age = 3if age &gt;= 18: print('your age is', age) print('adult')else: print('your age is', age) print('teenager') if elif else语句1234567age = 3if age &gt;= 18: print('adult')elif age &gt;= 6: print('teenager')else: print('kid') ##循环Python 的循环有两种，一种是for…in循环，另一种是while循环。 for…in循环作用是依次把list或者tuple中的每个元素迭代出来。 123names = ['Michael', 'Bob', 'Tracy']for name in names: print(name) 输出结果如下： 123MichaelBobTracy while循环只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现。 123456um = 0n = 99while n &gt; 0: sum = sum + n n = n - 2print(sum) 在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。 breakbreak语句可以提前结束退出循环 1234567n = 1while n &lt;= 100: if n &gt; 10: # 当n = 11时，条件满足，执行break语句 break # break语句会结束当前循环 print(n) n = n + 1print('END') continue可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。 123456n = 0while n &lt; 10: n = n + 1 if n % 2 == 0: # 如果n是偶数，执行continue语句 continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行 print(n) dict和setdictPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。 123&gt;&gt;&gt; d = &#123;'Michael': 95, 'Bob': 75, 'Tracy': 85&#125;&gt;&gt;&gt; d['Michael']95 注意事项：1.一个key对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉2.key不存在，dict就会报错避免方式：一是通过in判断key是否存在 二是通过dict的get()方法，如果key不存在，可以返回None，或者自己指定的value3.删除key，用pop(key)方法，对应的value也会从dict中删除 setset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合： 123&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; 注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。重复元素在set中自动被过滤： 123&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; set的增删方法add(key): 添加元素到set中，可重复添加，但是不会有效果remove(key): 删除元素]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 基本函数]]></title>
    <url>%2FBlog%2Fposts%2F3.html</url>
    <content type="text"><![CDATA[基本函数语法定义函数在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。我们以自定义一个求绝对值的my_abs函数为例： 12345def my_abs(x): if x &gt;= 0: return x else: return -x 调用函数12&gt;&gt;&gt; print(my_abs(-99))99 空函数定义一个什么也不做的空函数 12def nop(): pass #pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来 参数检查参数个数检查，python解释器会自动检查出来，并抛出TypeError参数类型检查，使用isinstance() 1234567def my_abs(x): if not isinstance(x, (int, float)): raise TypeError('bad operand type') if x &gt;= 0: return x else: return -x 若输入参数出现错误，会抛出一个错误 函数的参数位置参数1234def power(x): return x * x&gt;&gt;&gt; power(5)&gt;&gt;&gt; 25 12345678def power(x, n): s = 1 while n &gt; 0: n = n - 1 s = s * x return s&gt;&gt;&gt; power(5,3)125 根据定义的参数个数传入几个位置参数 默认参数设置的默认参数也可以在函数调用时明确传入，更改默认参数 12345678910def power(x, n=2): s = 1 while n &gt; 0: n = n - 1 s = s * x return s&gt;&gt;&gt; power(5)25&gt;&gt;&gt; power(5, 3)125 注意：默认参数必须指向不变对象 可变参数当参数个数不确定时，我们可以把这些不确定的参数当作一个list或者tuple传递进来例如：以数学题为例，给定一组a,b,c,……，计算他们的平方和 123456789def calc(numbers): sum = 0 for n in numbers: sum = sum + n * n return sum&gt;&gt;&gt; calc([1, 2, 3])14&gt;&gt;&gt; calc((1, 3, 5, 7))84 这种方式需要先组装出一个list或者tuple但是利用可变参数，调用函数的方式可以简化成这样： 123456789def calc(*numbers): sum = 0 for n in numbers: sum = sum + n * n return sum&gt;&gt;&gt; calc(1, 2)5&gt;&gt;&gt; calc()0 定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个 * 号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数如果已经有一个list或者tuple，要调用一个可变参数,Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去 123&gt;&gt;&gt; nums = [1, 2, 3]&gt;&gt;&gt; calc(*nums)14 关键字参数可变参数传入0个或者任意多个参数，在调用时自动组装为一个tuple，关键字参数传入0个或者多个含参数名的参数，这些关键字参数在函数内部自动组装成一个dict示例如下： 123456def person(name, age, **kw): print('name:', name, 'age:', age, 'other:', kw)&gt;&gt;&gt; person('Bob', 35, city='Beijing')name: Bob age: 35 other: &#123;'city': 'Beijing'&#125;&gt;&gt;&gt; person('Adam', 45, gender='M', job='Engineer')name: Adam age: 45 other: &#123;'gender': 'M', 'job': 'Engineer'&#125; 关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。 命名关键字参数如果要限制关键字参数的名字，可以用命名关键字参数示例如下： 1234def person(name, age, *, city, job): print(name, age, city, job)&gt;&gt;&gt; person('Jack', 24, city='Beijing', job='Engineer')Jack 24 Beijing Engineer 和关键字参数*kw不同，命名关键字参数需要一个特殊分隔符，后面的参数被视为命名关键字参数但是如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符了 命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错 123456def person(name, age, *args, city, job): print(name, age, args, city, job)&gt;&gt; person('Jack', 24, 'Beijing', 'Engineer')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: person() takes 2 positional arguments but 4 were given 参数组合在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数** 关键字参数与命名关键字参数对应的是字典dict，可变参数对应的是元组]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DOM选择器]]></title>
    <url>%2FBlog%2Fposts%2F1.html</url>
    <content type="text"><![CDATA[属性选择器属性选择器是在CSS2中引入的，他们能够指定一些规则，这些规则根据元素的属性（诸如href或title）以及这些属性的值对元素进行匹配 12345&lt;ul&gt; &lt;li&gt;&lt;a href="" lang="en-GB" rel="friend net"&gt;Peter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="" lang="es-ES" rel-"fiend"&gt;Pedro&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="" lang="es-MX" rel-"contact"&gt;Pancho&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 简单属性选择器将规则应用到定义了指定属性的元素上，而不管属性的值是什么 123a[rel] &#123; color: red;&#125; 由于所有元素都有rel属性，所以所有元素都会应用这条规则 精确属性值选择器123a[rel='friend'] &#123; color: red;&#125; 这个代码只会将规则标记到第二个a元素 部分属性选择器123a[rel~='friend'] &#123; color: red;&#125; 这个代码会选择rel属性中带有friend的值的元素，则这个规则会标记到第一与第二个 语言属性选择器123a[lang|='es'] &#123; color: red;&#125; 选中所有属性值以es开头的lang语言，即会选中2和3 CSS3的新属性选择器开始字串属性值选择器（开始选择器）该选择器会选择一些元素，这些元素所选择的属性是以一个字符串为起始，该字符串会作为参数提供给选择器，这个选择器使用插入符号(^)修饰属性中的等号 1E[attr^='value'] &#123;&#125; 这行代码将在指定属性的起始处寻找指定的值示例如下： 123456&lt;p&gt;Lorem ipsum dolor &lt;a href="mailto:email@example.com"&gt;email&lt;a&gt; sit amet.&lt;/a&gt;&lt;/p&gt;&lt;style&gt;a[href^='mailto'] &#123; background-image: url('email_go.png');&#125;&lt;/style&gt; 输出结果为： 1Lorem ipsum dolor email sit amet. #这里的email是一个地址即上述href绑定的地址 email原为一图片索引，本人懒就没放图片 结束子串属性值选择器（结束选择器）与开始选择器相反，使用该选择器去选择以指定的值结束的属性语法差异为用($)去修饰(=) 任意子串属性值选择器（任意选择器）该选择器使用规则即在指定的属性字符串的内部任意位置搜索指定的子串该选择器使用的符号是(*) 多属性选择器可以把多个选择器串接在一起，这样在选择目标的时候能够做到非常的具体，使用多选择器，可以通过定义在开始、结束以及中间任意位置的值创建应用到属性上的规则 12&lt;p&gt;&lt;a href="http://example.com/folder1/file.pdf"&gt;Lorem ipsum&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://example.com/folder2/file.pdf"&gt;Lorem ipsum&lt;/a&gt;&lt;/p&gt; 如果要指定一条只应用到第二个p元素的规则，可以把一些选择器串接到一起： 1a[href^='http://'][href*='/folder2/'][href$='.pdf'] &#123;&#125; 这行代码会寻找这样的a元素，它具有一个href属性，是以 http: // 开始，以.pdf结束，并且在中间包含了/folder2/，非常明确 普通兄弟连结符12E + F &#123;&#125; #相邻兄弟连结符E ~ F &#123;&#125; #普通兄弟连结符 相邻兄弟连结符选择的是文档树的同一层级，紧邻在元素(E)之后的任意元素；普通兄弟连结符选择的是文档树的同一层级，位于元素(E)之后的任意元素。示例如下： 12345678910111213141516&lt;p&gt;Next we are going to discuss ... &lt;/p&gt;&lt;h2&gt;Ren&amp;eacute; Descartes&lt;/h2&gt;&lt;p&gt;A highly influential French philosopher...&lt;/p&gt;&lt;p&gt;He only famously declared:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;I think,therefore I am.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;However,this presumes the existence of the speaker.&lt;/p&gt;&lt;style&gt;h2 + p &#123; font-weight:bolder;&#125;h2 ~ p &#123; font-style: italic;&#125;&lt;/style&gt; 输出结果如下：]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS快速入门]]></title>
    <url>%2FBlog%2Fposts%2F0.html</url>
    <content type="text"><![CDATA[入门语法介绍box-sizing属性box-sizing,可以设定元素的大小该如何计算，包括两个属性：content-box 与 border-box 123div &#123; boc-sizing: content-box;&#125; 上面的代码box-sizing的默认值是content-box,对元素设置所设定的宽度会应用到该元素的内容上，而填充和边框会照常加上去如果把值设置为border-box，则意味着设定的width值是内容、填充和边框的总宽度 示例如下： 123456div &#123; border: 10px solid black; box-sizing: border-box; padding: 10px; width: 150px;&#125; 现在150px的宽度包括了填充和边框，二者在内容两侧都占据了10px，所以div元素的内容计算宽度就是110px，即150px减去20px的填充和20px的边框对于Firefox来说，关于它的-moz-box-sizing属性，有额外的padding-box属性，使用这个值，计算元素属性时会对它的填充和内容进行计算，不包括边框]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
