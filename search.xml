<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[线性表]]></title>
    <url>%2FBlog%2Fposts%2F10.html</url>
    <content type="text"><![CDATA[线性表线性表：零个或多个数据元素的有限序列 定义若将线性表记为（a(1),…,a(i-1),a(i),a(i+1),…a(n)）,则表中a(i-1)领先于a(i),a(i)领先于a(i+1)，称a(i-1)是a(i)的直接前驱元素，a(i+1)是a(i)的直接后继元素，当i=1,2,…,n-1时，a(i)有且仅有一个直接后继元素，当i=2,3,…,n时，a(i)有且仅有一个直接前驱元素。线性表元素的个数n（n&gt;=0）定义线性表的长度，当n=0时，称为空表。 线性表的抽象数据类型定义如下： 123456789101112131415ADT 线性表（List）Data 线性表的数据对象集合为&#123;a1,a2,...,an&#125;，每个元素的类型均为DataType。其中，除第一个元素a1外， 每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。 数据元素之间的关系是一对一的关系。Operation InitList(*L)： 初始化操作，建立一个空的线性表L。 ListEmpty(L)： 若线性表为空，返回true，否则返回false。 ClearList(*L)：将线性表清空。 GetElem(L,i,*e)：将线性表L中的第i个位置元素值返回给e。 LocateElem(L,e): 在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，返回0表示失败。 ListInsert(*L,i,e)：在线性表L中的第i个位置插入新元素e。 ListDelete(*L,i,*e): 删除线性表L中第i个位置元素，并用e返回其值。 ListLength(L)：返回线性表L的元素个数。endADT 对于不同的应用，线性表的基本操作是不同的，上述操作是最基本的，对于实际问题中涉及的关于线性表的更复杂操作，完全可以用这些基本操作的组合来实现。示例：比如，要实现两个线性表集合A和B的并集操作。即要使得集合A=A∪B，说白了，就是把存在集合B中的但不存在A中的数据元素插入到A中即可。假设La表示集合A，Lb表示集合B，则实现的代码如下： 1234567891011121314/*将所有的在线性表Lb中但不在La中的数据元素插入到La中*/void union(List *La,List Lb)&#123; int La_len,Lb_len,i; ElemType e; /*声明与La和Lb相同的数据元素e */ La_len = ListLength(La); /*求线性表的长度*/ Lb_len = ListLength(Lb) for (i=1; i&lt;=Lb_len; i++) &#123; GetElem(Lb,i,e); /*取Lb中第i个数据元素赋给e*/ if(!LocateElem(La,e,equal)) /*La中不存在和e相同数据元素*/ &#123; ListInsert(La,++La_len,e); /*插入*/ &#125; &#125;&#125; 线性表的顺序存储结构线性表的顺序存储结构：指的是用一段地址连续的存储单元依次存储线性表的数据元素。线性表的顺序存储的结构代码 1234567define MAXSIZE 20 /*存储空间初始分配量*/typedef int ElemType /*ElemType 类型根据实际情况而定，这里假设为int*/typedef struct&#123; ElemType data[MAXSIZE]; /*数组存储数据元素，最大值为MAXSIZE*/ int length; /*线性表当前长度*/&#125;Sqlist； 顺序存储结构需要三个属性： 存储空间的起始位置：数组data，它的存储位置就是存储空间的存储位置。 线性表的最大存储容量：数组长度MaxSize。 线性表的当前长度：length。 注意：线性表的长度与数组的长度是不一样的，线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的；数组的长度指的是线性表存放线性表的存储空间的长度，在任意时刻，线性表的长度小于等于数组的长度。 顺序存储结构的插入与删除 获得元素操作 对于顺序存储结构来说，如果我们要实现GetElem操作，只要i的数值在数组下标范围内，就是把数组第i-1下标的值返回即可。示例代码如下： 1234567891011121314151617#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0typedef int Status;/*Status 是函数的类型，其值是函数结果状态代码，如OK等*//*初始条件：顺序线性表 L 已存在，1&lt;=i&lt;=ListLength(L)*//*操作结果：用e返回L中第i个数据元素的值*/Status GetElem (SqList L,int i,ElemType *e)&#123; if(L.length==0 || i&lt;1 || i&gt;L.Length) &#123; return ERROR; &#125; *e=L.data[i-1]; return OK;&#125; 插入操作插入算法的思路： 如果插入位置不合理，抛出异常； 如果线性表长度大于等于数组长度，则抛出异常或动态增加容量 从最后一个元素开始向前遍历到第i个位置，分别将它们都向后移动一位 将要插入元素填入位置i处 表长加1实现代码如下：/* 初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L)/ / 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1*/Status ListInsert (SqList *L,int i,ElemType e) { int k; if (ListLength(L)==MAXSIZE) /* 顺序线性表已经满 / { return ERROR; } if (i&lt;1 || i&gt;ListLength+1) / 当i不在范围内时/ { return ERROR; } if (i&lt;=ListLength) / 若插入数据位置不在表尾 */ { return ERROR; }}]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构绪论]]></title>
    <url>%2FBlog%2Fposts%2F9.html</url>
    <content type="text"><![CDATA[基本概念合术语数据数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。 数据元素数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。 数据项数据项：一个数据元素可以由若干个数据项组成；数据项是数据不可分割的最小单位。但是在真正讨论问题时，数据元素才是数据结构中建立数据模型的着眼点。 数据对象数据对象：是性质相同的数据元素的集合，是数据的子集。 数据结构数据对象：是相互之间存在一种或多种特定关系的数据元素的集合。 逻辑结构与物理结构逻辑结构集合结构：集合结构中的数据元素除了同属于一个集合外，他们之间没有其他联系，类似于数学中的集合线性结构：线性结构中的数据元素之间是一对一的关系树形结构：树形结构的数据元素之间存在一种一对多的层次关系图形结构：图形结构之间的数据元素是多对多的关系 物理结构（存储结构）物理结构：是指数据的逻辑结构在计算机中的存储形式数据元素的存储结构有两种：顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的 抽象数据类型数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称在C语言中，按照取值的不同，数据类型可以分为两类原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等结构类型：由若干个类型组合而成，是可以再分解的。例如：整形数组是由若干个整型数据组成的抽象是指抽象出事物具有的普遍性的本质。]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象高级编程]]></title>
    <url>%2FBlog%2Fposts%2F8.html</url>
    <content type="text"><![CDATA[数据封装、继承和多态只是面向对象程序设计中最基础的3个概念。在Python中，面向对象还有很多高级特性，允许我们写出非常强大的功能，我们会讨论多重继承、定制类、元类等概念。 使用slotsslots是用来限制class实例能添加的属性 12class Student(object): __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称 测试结果L: 1234567&gt;&gt;&gt; s = Student() # 创建新的实例&gt;&gt;&gt; s.name = 'Michael' # 绑定属性'name'&gt;&gt;&gt; s.age = 25 # 绑定属性'age'&gt;&gt;&gt; s.score = 99 # 绑定属性'score'Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'Student' object has no attribute 'score' 由于’score’没有被放到slots中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。使用slots要注意，slots定义的属性仅对当前类实例起作用，对继承的子类是不起作用的： 使用@property在绑定属性时，如果我们直接向下面这样把属性暴露出去，虽然写起来简单，但是，没办法检查参数，导致成绩可以随便改 12s = Student()s.score = 9999 这显然不合逻辑。为了限制score的范围，可以通过一个set_score()方法来设置成绩，再通过一个get_score()来获取成绩，这样，在set_score()方法里，就可以检查参数： 1234567891011class Student(object): def get_score(self): return self._score def set_score(self, value): if not isinstance(value, int): raise ValueError('score must be an integer!') if value &lt; 0 or value &gt; 100: raise ValueError('score must between 0 ~ 100!') self._score = value 现在，对任意的Student实例进行操作，就不能随心所欲地设置score了： 12345678&gt;&gt;&gt; s = Student()&gt;&gt;&gt; s.set_score(60) # ok!&gt;&gt;&gt; s.get_score()60&gt;&gt;&gt; s.set_score(9999)Traceback (most recent call last): ...ValueError: score must between 0 ~ 100! 但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的@property装饰器就是负责把一个方法变成属性调用的： 12345678910111213class Student(object): @property def score(self): return self._score @score.setter def score(self, value): if not isinstance(value, int): raise ValueError('score must be an integer!') if value &lt; 0 or value &gt; 100: raise ValueError('score must between 0 ~ 100!') self._score = value @property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作： 12345678&gt;&gt;&gt; s = Student()&gt;&gt;&gt; s.score = 60 # OK，实际转化为s.set_score(60)&gt;&gt;&gt; s.score # OK，实际转化为s.get_score()60&gt;&gt;&gt; s.score = 9999Traceback (most recent call last): ...ValueError: score must between 0 ~ 100! 注意到这个神奇的@property，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性： 12345678910111213class Student(object): @property def birth(self): return self._birth @birth.setter def birth(self, value): self._birth = value @property def age(self): return 2015 - self._birth 上面的birth是可读写属性，而age就是一个只读属性，因为age可以根据birth和当前时间计算出来。@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。 多重继承继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能，例如Animal类层的设计，假设我们要实现以下4种动物： Dog - 狗狗； Bat - 蝙蝠； Parrot - 鹦鹉； Ostrich - 鸵鸟。如果按照哺乳动物与鸟类归类，可以将Dog与Bat归为一类，Parrot与Ostrich归为一类，但是如果我们再按照能跑与能飞来分类，将非常麻烦，所以python设计多重继承 我们要给动物加上Runable与Flyable的功能，只需要定义好Runnable与Flyable的类 1234567class Runnable(object): def run(self): print('Running...')class Flyable(object): def fly(self): print('Flying...') 对于需要Runnable功能的动物，就多继承一个Runnable，例如Dog： 12class Dog(Mammal, Runnable): pass 对于需要Flyable功能的动物，就多继承一个Flyable，例如Bat： 12class Bat(Mammal, Flyable): pass 通过多重继承，一个子类就可以同时获得多个父类的所有功能。 MixIn在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，再同时继承Runnable。这种设计通常称之为MixIn。为了更好地看出继承关系，我们把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。类似的，你还可以定义出肉食动物CarnivorousMixIn和植食动物HerbivoresMixIn，让某个动物同时拥有好几个MixIn： 12class Dog(Mammal, RunnableMixIn, CarnivorousMixIn): pass MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。 Python自带的很多库也使用了MixIn。举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务来。比如，编写一个多进程模式的TCP服务，定义如下： 12class MyTCPServer(TCPServer, ForkingMixIn): pass 编写一个多线程模式的UDP服务，定义如下： 12class MyUDPServer(UDPServer, ThreadingMixIn): pass 如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixIn： 12class MyTCPServer(TCPServer, CoroutineMixIn): pass 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。由于Python允许使用多重继承，因此，MixIn就是一种常见的设计。只允许单一继承的语言（如Java）不能使用MixIn的设计。 定制类str我们先定义一个Student类，打印一个实例： 123456&gt;&gt;&gt; class Student(object):... def __init__(self, name):... self.name = name...&gt;&gt;&gt; print(Student('Michael'))&lt;__main__.Student object at 0x109afb190&gt; 打印出一堆&lt;main.Student object at 0x109afb190&gt;，不好看。怎么才能打印得好看呢？只需要定义好str()方法，返回一个好看的字符串就可以了： 12345678&gt;&gt;&gt; class Student(object):... def __init__(self, name):... self.name = name... def __str__(self):... return 'Student object (name: %s)' % self.name...&gt;&gt;&gt; print(Student('Michael'))Student object (name: Michael) 这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。但是细心的朋友会发现直接敲变量不用print，打印出来的实例还是不好看： 123&gt;&gt;&gt; s = Student('Michael')&gt;&gt;&gt; s&lt;__main__.Student object at 0x109afb310&gt; 这是因为直接显示变量调用的不是str()，而是repr()，两者的区别是str()返回用户看到的字符串，而repr()返回程序开发者看到的字符串，也就是说，repr()是为调试服务的。 解决办法是再定义一个repr()。但是通常str()和repr()代码都是一样的，所以，有个偷懒的写法： 123456class Student(object): def __init__(self, name): self.name = name def __str__(self): return 'Student object (name=%s)' % self.name __repr__ = __str__ iter如果一个类想被用于for … in循环，类似list或tuple那样，就必须实现一个iter()方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的next()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。 我们以斐波那契数列为例，写一个Fib类，可以作用于for循环： 123456789101112class Fib(object): def __init__(self): self.a, self.b = 0, 1 # 初始化两个计数器a，b def __iter__(self): return self # 实例本身就是迭代对象，故返回自己 def __next__(self): self.a, self.b = self.b, self.a + self.b # 计算下一个值 if self.a &gt; 100000: # 退出循环的条件 raise StopIteration() return self.a # 返回下一个值 现在，试试把Fib实例作用于for循环： 1234567891011&gt;&gt;&gt; for n in Fib():... print(n)...11235...4636875025 getitemFib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素： 1234&gt;&gt;&gt; Fib()[5]Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: 'Fib' object does not support indexing 要表现得像list那样按照下标取出元素，需要实现getitem()方法： 123456class Fib(object): def __getitem__(self, n): a, b = 1, 1 for x in range(n): a, b = b, a + b return a 现在，就可以按下标访问数列的任意一项了： 12345678910111213&gt;&gt;&gt; f = Fib()&gt;&gt;&gt; f[0]1&gt;&gt;&gt; f[1]1&gt;&gt;&gt; f[2]2&gt;&gt;&gt; f[3]3&gt;&gt;&gt; f[10]89&gt;&gt;&gt; f[100]573147844013817084101]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象编程]]></title>
    <url>%2FBlog%2Fposts%2F7.html</url>
    <content type="text"><![CDATA[类和实例面向对象最重要的概念就是类（Class）和实例（Instance），类是抽象的模板，实例是根据类创建出来的一个个具体的“对象”。以Student类为例，定义Student类，定义类的关键字是class 12class Student(object): pass class后面紧接着是类名，即Student，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。定义好了Student类，就可以根据Student类创建出Student的实例，创建实例是通过类名+()实现的： 12345&gt;&gt;&gt; bart = Student()&gt;&gt;&gt; bart&lt;__main__.Student object at 0x10a67a590&gt;&gt;&gt;&gt; Student&lt;class '__main__.Student'&gt; 可以看到，变量bart指向的就是一个Student的实例，后面的0x10a67a590是内存地址，每个object的地址都不一样，而Student本身则是一个类。由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的init方法，在创建实例的时候，就把name，score等属性绑上去： 12345class Student(object): def __init__(self, name, score): self.name = name self.score = score 注意到init方法的第一个参数永远是self，表示创建的实例本身，因此，在init方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。有了init方法，在创建实例的时候，就不能传入空的参数了，必须传入与init方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去： 12345&gt;&gt;&gt; bart = Student('Bart Simpson', 59)&gt;&gt;&gt; bart.name'Bart Simpson'&gt;&gt;&gt; bart.score59 和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。 数据封装数据封装即是类的方法 12345678lass Student(object): def __init__(self, name, score): self.name = name self.score = score def print_score(self): print('%s: %s' % (self.name, self.score)) 在Student这个类中定义了print_score方法；和普通函数一样，要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入。 12&gt;&gt;&gt; bart.print_score()Bart Simpson: 59 练习1:在Student类里定义get_grade方法，成绩在90分以上返回这个人的名字和A，60到90之间为B，60以下为C 1234567891011121314151617# -*- coding: utf-8 -*-class Student(object): def __init__(self, name, score): self.name = name self.score = score def get_grade(self): if self.score &gt;= 90: return 'A' elif self.score &gt;= 60: return 'B' else: return 'C'lisa = Student('Lisa', 99)bart = Student('Bart', 59)print(lisa.name, lisa.get_grade())print(bart.name, bart.get_grade()) 输出结果如下： 12Lisa A Bart C 总结类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同 访问限制在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的name、score属性 123456&gt;&gt;&gt; bart = Student('Bart Simpson', 59)&gt;&gt;&gt; bart.score59&gt;&gt;&gt; bart.score = 99&gt;&gt;&gt; bart.score99 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 __ ，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改,但是如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法 1234567891011121314151617class Student(object): def __init__(self, name, score): self.__name = name self.__score = score def get_name(self): #通过get_name获取内部名字等 return self.__name def get_score(self): return self.__score def set_score(self, score): #通过set_score修改内部变量，用这种办法，可以对参数进行检查，避免传入无效的参数 if 0 &lt;= score &lt;= 100: self.__score = score else: raise ValueError('bad score') 需要注意的是，在Python中，变量名类似xxx的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用name、score这样的变量名。有些时候，你会看到以一个下划线开头的实例变量名，比如_name，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问name是因为Python解释器对外把name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量： 12&gt;&gt;&gt; bart._Student__name'Bart Simpson' 但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名。总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。练习2：请把下面的Student对象的gender字段对外隐藏起来，用get_gender()和set_gender()代替，并检查参数有效性 12345678910111213141516171819# -*- coding: utf-8 -*-class Student(object): def __init__(self, name, gender): self.name = name self.__gender = gender def get_gender(self): return self.__gender def set_gender(self,gender): self.__gender = gender# 测试:bart = Student('Bart', 'male')if bart.get_gender() != 'male': print('测试失败!')else: bart.set_gender('female') if bart.get_gender() != 'female': print('测试失败!') else: print('测试成功!') 测试结果： 1测试成功! 继承和多态继承在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。比如，我们已经编写了一个名为Animal的class，有一个run()方法可以直接打印，当我们需要编写Dog和Cat类时，就可以直接从Animal类继承 123456789class Animal(object): def run(self): print('Animal is running...')class Dog(Animal): passclass Cat(Animal): pass 对于Dog来说，Animal就是它的父类，对于Animal来说，Dog就是它的子类。Cat和Dog类似。继承就是子类获得了父类的全部功能。由于Animial实现了run()方法，因此，Dog和Cat作为它的子类，什么事也没干，就自动拥有了run()方法 123456&gt;&gt;&gt; dog = Dog()&gt;&gt;&gt; dog.run()&gt;&gt;&gt; cat = Cat()&gt;&gt;&gt; cat.run()Animal is running...Animal is running... 不仅可以实现继承，同时子类可以对代码进行改进与修改 1234567891011&gt;&gt;&gt; class Dog(Animal):&gt;&gt;&gt; def run(self):&gt;&gt;&gt; print('Dog is running...')&gt;&gt;&gt; class Cat(Animal):&gt;&gt;&gt; def run(self):&gt;&gt;&gt; print('Cat is running...')Dog is running...Cat is running... 子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()，在代码运行的时候，总是会调用子类的run(),即继承的另一个好处：多态。 多态123456789101112&gt;&gt;&gt; def run_twice(animal):&gt;&gt;&gt; animal.run()&gt;&gt;&gt; animal.run()&gt;&gt;&gt; run_twice(Animal())Animal is running...Animal is running...&gt;&gt;&gt; run_twice(Dog())Dog is running...Dog is running...&gt;&gt;&gt; run_twice(Cat())Cat is running...Cat is running... 对于一个变量，我们只需要知道它是Animal类型，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、还是Cat对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树 获取对象信息使用type() 1 基本类型可以用type()判断 123456&gt;&gt;&gt; type(123)&lt;class 'int'&gt;&gt;&gt;&gt; type('str')&lt;class 'str'&gt;&gt;&gt;&gt; type(None)&lt;type(None) 'NoneType'&gt; 2 如果一个变量指向函数或者类，也可以用type()判断 1234&gt;&gt;&gt; type(abs)&lt;class 'builtin_function_or_method'&gt;&gt;&gt;&gt; type(a)&lt;class '__main__.Animal'&gt; 3 判断一个对象是否是函数可以使用types模块中定义的常量 123456789101112&gt;&gt;&gt; import types&gt;&gt;&gt; def fn():... pass...&gt;&gt;&gt; type(fn)==types.FunctionTypeTrue&gt;&gt;&gt; type(abs)==types.BuiltinFunctionTypeTrue&gt;&gt;&gt; type(lambda x: x)==types.LambdaTypeTrue&gt;&gt;&gt; type((x for x in range(10)))==types.GeneratorTypeTrue 使用isinstance()对于class的继承关系来说，使用types()就很不方便，为了判断class的类型，可以使用isinstance()函数: 1 对于如下继承关系的函数1object -&gt; Animal -&gt; Dog -&gt; Husky 可以创建3种类型的对象，然后判断，isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上 1234567891011&gt;&gt;&gt; a = Animal()&gt;&gt;&gt; d = Dog()&gt;&gt;&gt; h = Husky()&gt;&gt;&gt; isinstance(h, Husky)True&gt;&gt;&gt; isinstance(h, Dog)True&gt;&gt;&gt; isinstance(d, Dog) and isinstance(d, Animal)True&gt;&gt;&gt; isinstance(d, Husky)False 2 可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple:1234&gt;&gt;&gt; isinstance([1, 2, 3], (list, tuple))True&gt;&gt;&gt; isinstance((1, 2, 3), (list, tuple))True 使用dir()dir()函数可以获得一个对象的所有属性和方法，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法 12&gt;&gt;&gt; dir('ABC')['__add__', '__class__',..., '__subclasshook__', 'capitalize', 'casefold',..., 'zfill'] 类似xxx的属性和方法在Python中都是有特殊用途的，比如len方法返回长度。在Python中，如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的len()方法，所以，下面的代码是等价的： 1234&gt;&gt;&gt; len('ABC')3&gt;&gt;&gt; 'ABC'.__len__()3 我们自己写的类，如果也想用len(myObj)的话，就自己写一个len()方法： 1234567&gt;&gt;&gt; class MyDog(object):... def __len__(self):... return 100...&gt;&gt;&gt; dog = MyDog()&gt;&gt;&gt; len(dog)100 仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态： 123456789101112131415161718192021222324&gt;&gt;&gt; class MyObject(object):... def __init__(self):... self.x = 9... def power(self):... return self.x * self.x...&gt;&gt;&gt; obj = MyObject()&gt;&gt; hasattr(obj, 'x') # 有属性'x'吗？True&gt;&gt;&gt; obj.x9&gt;&gt;&gt; hasattr(obj, 'y') # 有属性'y'吗？False&gt;&gt;&gt; setattr(obj, 'y', 19) # 设置一个属性'y'&gt;&gt;&gt; hasattr(obj, 'y') # 有属性'y'吗？True&gt;&gt;&gt; getattr(obj, 'y') # 获取属性'y'19&gt;&gt;&gt; obj.y # 获取属性'y'19&gt;&gt;&gt; getattr(obj, 'z') # 获取属性'z',试图获取不存在的属性，会抛出AttributeError的错误Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;AttributeError: 'MyObject' object has no attribute 'z' 可以传入一个default参数，如果属性不存在，就返回默认值： 12&gt;&gt;&gt; getattr(obj, 'z', 404) # 获取属性'z'，如果不存在，返回默认值404404 也可以获得对象的方法： 123456789&gt;&gt;&gt; hasattr(obj, 'power') # 有属性'power'吗？True&gt;&gt;&gt; getattr(obj, 'power') # 获取属性'power'&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;&gt;&gt;&gt; fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn&gt;&gt;&gt; fn # fn指向obj.power&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;&gt;&gt;&gt; fn() # 调用fn()与调用obj.power()是一样的81 实例属性和类属性由于Python是动态语言，根据类创建的实例可以任意绑定属性。给实例绑定属性的方法是通过实例变量，或者通过self变量： 123456class Student(object): def __init__(self, name): self.name = names = Student('Bob')s.score = 90 但是，如果Student类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归Student类所有： 12class Student(object): name = 'Student' 当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下： 12345678910111213141516&gt;&gt;&gt; class Student(object):... name = 'Student'...&gt;&gt;&gt; s = Student() # 创建实例s&gt;&gt;&gt; print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性Student&gt;&gt;&gt; print(Student.name) # 打印类的name属性Student&gt;&gt;&gt; s.name = 'Michael' # 给实例绑定name属性&gt;&gt;&gt; print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性Michael&gt;&gt;&gt; print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问Student&gt;&gt;&gt; del s.name # 如果删除实例的name属性&gt;&gt;&gt; print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了Student 练习:为了统计学生人数，可以给Student类增加一个类属性，每创建一个实例，该属性自动增加： 123456789101112131415161718192021# -*- coding: utf-8 -*-class Student(object): count = 0 def __init__(self, name): self.name = name Student.count += 1 # 测试:if Student.count != 0: print('测试失败!')else: bart = Student('Bart') if Student.count != 1: print('测试失败!') else: lisa = Student('Bart') if Student.count != 2: print('测试失败!') else: print('Students:', Student.count) print('测试通过!') 12Students: 2 测试通过! 实例属性属于各个实例所有，互不干扰；类属性属于类所有，所有实例共享一个属性；不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归函数]]></title>
    <url>%2FBlog%2Fposts%2F4.html</url>
    <content type="text"><![CDATA[递归函数在函数内部，可以调用其他函数，如果一个函数在内部调用自身本身，这个函数就是递归函数举个例子，我们来计算阶乘n! = 1 x 2 x 3 x … x n，用函数fact(n)表示，可以看出：fact(n) = n! = 1 x 2 x 3 x … x (n-1) x n = (n-1)! x n = fact(n-1) x n所以，fact(n)可以表示为n x fact(n-1)，只有n=1时需要特殊处理。于是，fact(n)用递归的方式写出来就是： 12345678910def fact(n): if n==1: return 1 return n * fact(n - 1)&gt;&gt;&gt; fact(1)1&gt;&gt;&gt; fact(5)120&gt;&gt;&gt; fact(100)93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000 递归函数的优点是定义简单，逻辑清晰，使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出 尾优化解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以把循环看成一种特殊的尾递归函数也是可以的尾递归是指，在函数返回的时候，调用自身本身，并且eturn语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中： 1234567def fact(n): return fact_iter(n, 1)def fact_iter(num, product): if num == 1: return product return fact_iter(num - 1, num * product) 可以看到，return fact_iter(num - 1, num * product) 仅返回递归函数本身，num - 1和 num * product在函数调用前就会被计算，不影响函数调用。fact(5)对应的fact_iter(5, 1)的调用如下： 123456===&gt; fact_iter(5, 1)===&gt; fact_iter(4, 5)===&gt; fact_iter(3, 20)===&gt; fact_iter(2, 60)===&gt; fact_iter(1, 120)===&gt; 120 尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数式编程]]></title>
    <url>%2FBlog%2Fposts%2F6.html</url>
    <content type="text"><![CDATA[python是面向对象编程的程序语言函数就是面向过程的程序设计的基本单元。函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出。 高阶函数变量可以指向函数既可以将函数赋值结果给变量，也可以将函数本身赋值给变量，即变量可以指向函数示例如下： 123456&gt;&gt;&gt; x = abs(-10)&gt;&gt;&gt; x10&gt;&gt;&gt; f=abs&gt;&gt;&gt; f&lt;built-in function abs&gt; 变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同 123&gt;&gt;&gt; f = abs&gt;&gt;&gt; f(-10)10 传入函数既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。一个最简单的高阶函数如下： 12def add(x, y, f): return f(x) + f(y) 编写高阶函数，就是让函数的参数能够接收别的函数。 map/reducePython内建了map()和reduce()函数。map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回示例如下： 12345678&gt;&gt;&gt; def f(x):... return x * x...&gt;&gt;&gt; r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])&gt;&gt;&gt; list(r)[1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; tuple(r)(1, 4, 9, 16, 25, 36, 49, 64, 81) map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数或者tuple()函数让它把整个序列都计算出来并返回一个listreduce把一个函数作用在一个序列[x1, x2, x3, …]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，其效果就是： 1reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4) 练习1: 利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：[‘adam’, ‘LISA’, ‘barT’]，输出：[‘Adam’, ‘Lisa’, ‘Bart’]： 12345678&gt;&gt;&gt; # -*- coding: utf-8 -*-&gt;&gt;&gt; def normalize(name):&gt;&gt;&gt; return name.capitalize()&gt;&gt;&gt;# 测试:&gt;&gt;&gt; L1 = ['adam', 'LISA', 'barT']&gt;&gt;&gt; L2 = list(map(normalize, L1))&gt;&gt;&gt; print(L2)['Adam', 'Lisa', 'Bart'] 练习2: Python提供的sum()函数可以接受一个list并求和，请编写一个prod()函数，可以接受一个list并利用reduce()求积： 1234567891011&gt;&gt;&gt; # -*- coding: utf-8 -*-&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def prod(L):&gt;&gt;&gt; return reduce(lambda x, y: x * y, L)&gt;&gt;&gt; print('3 * 5 * 7 * 9 =', prod([3, 5, 7, 9]))&gt;&gt;&gt; if prod([3, 5, 7, 9]) == 945:&gt;&gt;&gt; print('测试成功!')&gt;&gt;&gt; else:&gt;&gt;&gt; print('测试失败!')3 * 5 * 7 * 9 = 945 测试成功! filterPython内建的filter()函数用于过滤序列,用filter()这个高阶函数，关键在于正确实现一个“筛选”函数。filter()函数返回的是一个Iterator，也就是一个惰性序列，所以要强迫filter()完成计算结果，需要用list()函数获得所有结果并返回list.示例如下：用filter求素数计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：首先，列出从2开始的所有自然数，构造一个序列：2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …取新序列的第一个数5，然后用5把序列的5的倍数筛掉：7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …不断筛下去，就可以得到所有的素数。 123456789101112131415161718192021222324# 用Python来实现这个算法，可以先构造一个从3开始的奇数序列：def _odd_iter(): n = 1 while True: n = n + 2 yield n# 然后定义一个筛选函数：def _not_divisible(n): return lambda x: x % n &gt; 0# 最后，定义一个生成器，不断返回下一个素数：def primes(): yield 2 it = _odd_iter() # 初始序列 while True: n = next(it) # 返回序列的第一个数 yield n it = filter(_not_divisible(n), it) # 构造新序列#由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：# 打印1000以内的素数:for n in primes(): if n &lt; 1000: print(n) else: break 练习3: 回数是指从左向右读和从右向左读都是一样的数，例如 12321 ， 909 。请利用 filter() 滤掉非回数 12345678方案一:def is_palindrome(n): nn = str(n) #转成字符串 return nn == nn[::-1] #反转字符串并对比原字符串返回true/falseprint list(filter(is_palindrome,range(1,1000)))方案二:print list(filter(lambda n : str(n)==str(n)[::-1],range(1,1000))) #str(n)同上 sortedsorted()也是一个高阶函数，用sorted()排序的关键在于实现一个映射函数练习4：假设我们用一组tuple表示学生名字和成绩：L = [(‘Bob’, 75), (‘Adam’, 92), (‘Bart’, 66), (‘Lisa’, 88)]请用sorted()对上述列表分别按名字排序： 123456# -*- coding: utf-8 -*-L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]def by_name(t): return t[0].lower()L2 = sorted(L, key=by_name)print(L2) 输出结果如下： 1[('Adam', 92), ('Bart', 66), ('Bob', 75), ('Lisa', 88)] 再按成绩从高到低排序： 123456# -*- coding: utf-8 -*-L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]def by_score(t): return t[1]L2 = sorted(L, key=by_score)print(L2) 输出结果如下： 1[('Bart', 66), ('Bob', 75), ('Lisa', 88), ('Adam', 92)] 返回函数函数作为返回值高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回示例如下： 12345678910111213141516&gt;&gt;&gt; def lazy_sum(*args):&gt;&gt;&gt; def sum():&gt;&gt;&gt; ax = 0&gt;&gt;&gt; for n in args:&gt;&gt;&gt; ax = ax + n&gt;&gt;&gt; return ax&gt;&gt;&gt; return sum&gt;&gt;&gt; f = lazy_sum(1, 3, 5, 7, 9) #当我们调用lazy_sum()时，返回的并不是求和结果，而是求和函数&gt;&gt;&gt; f&lt;function lazy_sum.&lt;locals&gt;.sum at 0x101c6ed90&gt;&gt;&gt;&gt; f() #调用函数f时，才真正计算求和的结果25 &gt;&gt;&gt; f1 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f2 = lazy_sum(1, 3, 5, 7, 9)&gt;&gt;&gt; f1==f2 #f1()和f2()的调用结果互不影响。False 闭包注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。我们来看一个例子： 123456789def count(): fs = [] for i in range(1, 4): def f(): return i*i fs.append(f) return fsf1, f2, f3 = count() 在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是： 123456&gt;&gt;&gt; f1()9&gt;&gt;&gt; f2()9&gt;&gt;&gt; f3()9 全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。练习5：利用闭包返回一个计数器函数，每次调用它返回递增整数 1234567891011121314151617# -*- coding: utf-8 -*-def createCounter(): s = [0] def counter(): s[0] = s[0]+1 return s[0] return counter# 测试:counterA = createCounter()print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5counterB = createCounter()if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]: print('测试通过!')else: print('测试失败!')1 2 3 4 5 测试通过! 匿名函数关键字lambda表示匿名函数，冒号前面的x表示函数参数。匿名函数有个限制，就是只能有一个表达式，不用写return，返回值就是该表达式的结果。用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数示例如下： 12345&gt;&gt;&gt; f = lambda x: x * x&gt;&gt;&gt; f&lt;function &lt;lambda&gt; at 0x101c6ef28&gt;&gt;&gt;&gt; f(5)25 装饰器12345678910&gt;&gt;&gt; def now():... print('2015-3-25')...&gt;&gt;&gt; f = now #由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数&gt;&gt;&gt; f()2015-3-25&gt;&gt;&gt; now.__name__ #函数对象有一个__name__属性，可以拿到函数的名字'now'&gt;&gt;&gt; f.__name__'now' 假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。简单例子如下： 123456789import functoolsdef log(text): def decorator(func): @functools.wraps(func) def wrapper(*args, **kw): print('%s %s():' % (text, func.__name__)) return func(*args, **kw) return wrapper return decorator 具体见廖雪峰学习网站，这里不具体介绍装饰器]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级特性]]></title>
    <url>%2FBlog%2Fposts%2F5.html</url>
    <content type="text"><![CDATA[切片取一个list或tuple的部分元素是非常常见的操作，例如，一个lst如下： 1L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack'] 用切片可以选择任意位置取元素 123L[0:3] #取前三个元素L[:] #全部复制L[-2:] #从倒数第二个向后取 输出结果如下所示： 123['Michael', 'Sarah', 'Tracy']['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']['Bob', 'Jack']] 同理字符串也可以这样操作 迭代Python的for循环抽象程度要高于C的for循环，因为Python的for循环不仅可以用在list或tuple上，还可以用在其他可迭代对象上。举例：dict迭代 123d = &#123;'a': 1, 'b': 2, 'c': 3&#125;for key in d: print(key) 输出结果为： 123acb 因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，如果要同时迭代key和value，可以用for k, v in d.items()。当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断： 123&gt;&gt;&gt; from collection import Iterable&gt;&gt;&gt; isinstance('abc',Iterable) #是否可迭代&gt;&gt;&gt; True 若对list实现类似Java那样的下标循环，可以使用Python内置的enumerate函数可以把一个list变成索引-元素对 12345&gt;&gt;&gt; for i, value in enumerate(['A', 'B', 'C']):&gt;&gt;&gt; print(i, value)0 A1 B2 C 请使用迭代查找一个list中最小和最大值，并返回一个tuple：自己写的示例代码 1234567891011def findMinAndMax(L):if L==[]: return(None,None) else: min=max=L[0] for i in L: if i&lt;min: min=i if i&gt;max: max=i return(min,max) 列表生成式列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))： 12&gt;&gt;&gt; list(range(1, 11))[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 但如果要生成[1x1, 2x2, 3x3, …, 10x10]怎么做？方法一是循环： 123456&gt;&gt;&gt; L = []&gt;&gt;&gt; for x in range(1, 11):... L.append(x * x)...&gt;&gt;&gt; L[1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list： 12&gt;&gt;&gt; [x*x for x in range(1,11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100] for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方： 12&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100] 还可以使用两层循环，可以生成全排列： 12&gt;&gt;&gt; [m + n for m in 'ABC' for n in 'XYZ']['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value,列表生成式也可以使用两个变量来生成list： 12&gt;&gt; d = &#123;'x': 'A', 'y': 'B', 'z': 'C' &#125;&gt;&gt;&gt; [k + '=' + v for k, v in d.items()] 输出结果如下： 1['y=B', 'x=A', 'z=C'] 练习题： L1为 [‘Hello’, ‘World’, 18, ‘Apple’, None]，输出 L2为 [‘hello’, ‘world’, ‘apple’]代码如下： 1L2 = [i.lower() for i in L1 if isinstance(i, str)==True] 生成器通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator： 123456&gt;&gt; L = [x * x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt; 创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值： 1234&gt;&gt;&gt; next(g)0&gt;&gt;&gt; next(g)1 generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误不想一个一个打印也可以用for循环进行打印 1234567891011121314&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; for n in g:... print(n)0149162536496481 第二种创建generator的办法是使用yield关键字generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。练习题：杨辉三角 12345 1 1 1 1 2 1 1 3 3 11 4 6 4 1 把每一行看做一个list，试写一个generator，不断输出下一行的list： 1234567891011def triangles(): a=[1] while True: yield a a=[sum(i) for i in zip([0]+a,a+[0])]n=0for t in triangles(): print(t) n=n+1 if n == 10: break 迭代器凡是可作用于for循环的对象都是Iterable类型；凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。Python的for循环本质上就是通过不断调用next()函数实现的，例如： 12for x in [1, 2, 3, 4, 5]: pass 实际上完全等价于： 12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 基础]]></title>
    <url>%2FBlog%2Fposts%2F2.html</url>
    <content type="text"><![CDATA[数据类型和变量数据类型数据类型分为整数、浮点数、字符串、布尔值和空值 变量变量可以是数字与任意数据类型 字符编码字符编码使用UTF-8标准 Python的字符串Python的字符串支持多语言，对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。Python对bytes类型的数据用带b前缀的单引号或双引号表示： 1x = b'ABC' 注意：区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节 以Unicode表示的str通过encode()方法可以编码为指定的bytes英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。在bytes中，无法显示为ASCII字符的字节，用\x##显示。反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法len()函数计算的是str的字符数，如果换成bytes，len()函数计算字节数 格式化运算符就是用来格式化字符串的。在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。常见的占位符有：%d（整数） %f（浮点数） %s（字符串） %x（十六进制整数）还有一种方式是format()方法使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多示例如下： 1'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'.format('小明', 17.125) list和tuplelistPython内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。示例如下： 1classmates = ['Michael', 'Bob', 'Tracy'] 变量classmates就是一个list，list的索引是从0开始的，最后一个元素的索引是len(classmates)-1除此之外，还可以用-1做索引,以此类推-2、-3等等 12&gt;&gt;&gt;classmates[-1]'Tracy' list中的经常使用的方法1.append()list是一个可变的有序表，所以，可以往list中追加元素到末尾 123&gt;&gt;&gt; classmates.append('Adm')&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy', 'Adm'] 2.insert()list可以把元素插入到指定的位置，比如索引号为1的位置 123&gt;&gt;&gt; classmates.insert(1, 'Jack')&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy', 'Adm'] 3.pop()删除list末尾的元素 123&gt;&gt;&gt; classmates.pop()&gt;&gt;&gt; classmates['Michael', 'Jack', 'Bob', 'Tracy'] 123&gt;&gt;&gt; classmates.pop(1)&gt;&gt;&gt; classmates['Michael', 'Bob', 'Tracy'] pop(i)是删除指定位置的元素 把某个元素替换成别的元素 123&gt;&gt;&gt; classmates[1] = 'Sarah'&gt;&gt;&gt; classmates['Michael', 'Sarah', 'Tracy'] list元素也可以是另一个list，比如： 123&gt;&gt;&gt; s = ['python', 'java',['asp', 'php'], 'scheme']&gt;&gt;&gt; len(s)4 tupletuple是另一种有序列表即元祖，与list非常类似，但是tuple一旦初始化后就不能修改。 1&gt;&gt;&gt; classmates('A', 'B', 'C') 现在这个classmates不能修改了，没有append，insert，pop等方法，只能正常使用classmates[0],classmates[-1],但是不能赋值成其他元素。使得代码更安全定义只有一个元素的tuple时必须加逗号，避免歧义 123456&gt;&gt;&gt; t = (1)&gt;&gt;&gt; t1&gt;&gt;&gt; t = (1,)&gt;&gt;&gt; t(1) 这是因为Python规定，这种情况下，按小括号进行计算，计算结果自然是1。tuple里也可以定义可变的list 12345&gt;&gt;&gt; t = ('a', 'b', ['A', 'B'])&gt;&gt;&gt; t[2][0] = 'X'&gt;&gt;&gt; t[2][1] = 'Y'&gt;&gt;&gt; t('a', 'b', ['X', 'Y']) 条件判断if、 if else、 if elif else if语句1234age = 20if age &gt;= 18: print('your age is', age) print('adult') if else语句1234567age = 3if age &gt;= 18: print('your age is', age) print('adult')else: print('your age is', age) print('teenager') if elif else语句1234567age = 3if age &gt;= 18: print('adult')elif age &gt;= 6: print('teenager')else: print('kid') ##循环Python 的循环有两种，一种是for…in循环，另一种是while循环。 for…in循环作用是依次把list或者tuple中的每个元素迭代出来。 123names = ['Michael', 'Bob', 'Tracy']for name in names: print(name) 输出结果如下： 123MichaelBobTracy while循环只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现。 123456um = 0n = 99while n &gt; 0: sum = sum + n n = n - 2print(sum) 在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。 breakbreak语句可以提前结束退出循环 1234567n = 1while n &lt;= 100: if n &gt; 10: # 当n = 11时，条件满足，执行break语句 break # break语句会结束当前循环 print(n) n = n + 1print('END') continue可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。 123456n = 0while n &lt; 10: n = n + 1 if n % 2 == 0: # 如果n是偶数，执行continue语句 continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行 print(n) dict和setdictPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。 123&gt;&gt;&gt; d = &#123;'Michael': 95, 'Bob': 75, 'Tracy': 85&#125;&gt;&gt;&gt; d['Michael']95 注意事项：1.一个key对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉2.key不存在，dict就会报错避免方式：一是通过in判断key是否存在 二是通过dict的get()方法，如果key不存在，可以返回None，或者自己指定的value3.删除key，用pop(key)方法，对应的value也会从dict中删除 setset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。要创建一个set，需要提供一个list作为输入集合： 123&gt;&gt;&gt; s = set([1, 2, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; 注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。重复元素在set中自动被过滤： 123&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])&gt;&gt;&gt; s&#123;1, 2, 3&#125; set的增删方法add(key): 添加元素到set中，可重复添加，但是不会有效果remove(key): 删除元素]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 基本函数]]></title>
    <url>%2FBlog%2Fposts%2F3.html</url>
    <content type="text"><![CDATA[基本函数语法定义函数在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。我们以自定义一个求绝对值的my_abs函数为例： 12345def my_abs(x): if x &gt;= 0: return x else: return -x 调用函数12&gt;&gt;&gt; print(my_abs(-99))99 空函数定义一个什么也不做的空函数 12def nop(): pass #pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来 参数检查参数个数检查，python解释器会自动检查出来，并抛出TypeError参数类型检查，使用isinstance() 1234567def my_abs(x): if not isinstance(x, (int, float)): raise TypeError('bad operand type') if x &gt;= 0: return x else: return -x 若输入参数出现错误，会抛出一个错误 函数的参数位置参数1234def power(x): return x * x&gt;&gt;&gt; power(5)&gt;&gt;&gt; 25 12345678def power(x, n): s = 1 while n &gt; 0: n = n - 1 s = s * x return s&gt;&gt;&gt; power(5,3)125 根据定义的参数个数传入几个位置参数 默认参数设置的默认参数也可以在函数调用时明确传入，更改默认参数 12345678910def power(x, n=2): s = 1 while n &gt; 0: n = n - 1 s = s * x return s&gt;&gt;&gt; power(5)25&gt;&gt;&gt; power(5, 3)125 注意：默认参数必须指向不变对象 可变参数当参数个数不确定时，我们可以把这些不确定的参数当作一个list或者tuple传递进来例如：以数学题为例，给定一组a,b,c,……，计算他们的平方和 123456789def calc(numbers): sum = 0 for n in numbers: sum = sum + n * n return sum&gt;&gt;&gt; calc([1, 2, 3])14&gt;&gt;&gt; calc((1, 3, 5, 7))84 这种方式需要先组装出一个list或者tuple但是利用可变参数，调用函数的方式可以简化成这样： 123456789def calc(*numbers): sum = 0 for n in numbers: sum = sum + n * n return sum&gt;&gt;&gt; calc(1, 2)5&gt;&gt;&gt; calc()0 定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个 * 号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数如果已经有一个list或者tuple，要调用一个可变参数,Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去 123&gt;&gt;&gt; nums = [1, 2, 3]&gt;&gt;&gt; calc(*nums)14 关键字参数可变参数传入0个或者任意多个参数，在调用时自动组装为一个tuple，关键字参数传入0个或者多个含参数名的参数，这些关键字参数在函数内部自动组装成一个dict示例如下： 123456def person(name, age, **kw): print('name:', name, 'age:', age, 'other:', kw)&gt;&gt;&gt; person('Bob', 35, city='Beijing')name: Bob age: 35 other: &#123;'city': 'Beijing'&#125;&gt;&gt;&gt; person('Adam', 45, gender='M', job='Engineer')name: Adam age: 45 other: &#123;'gender': 'M', 'job': 'Engineer'&#125; 关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。 命名关键字参数如果要限制关键字参数的名字，可以用命名关键字参数示例如下： 1234def person(name, age, *, city, job): print(name, age, city, job)&gt;&gt;&gt; person('Jack', 24, city='Beijing', job='Engineer')Jack 24 Beijing Engineer 和关键字参数*kw不同，命名关键字参数需要一个特殊分隔符，后面的参数被视为命名关键字参数但是如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符了 命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错 123456def person(name, age, *args, city, job): print(name, age, args, city, job)&gt;&gt; person('Jack', 24, 'Beijing', 'Engineer')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;TypeError: person() takes 2 positional arguments but 4 were given 参数组合在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数** 关键字参数与命名关键字参数对应的是字典dict，可变参数对应的是元组]]></content>
      <categories>
        <category>Python 知识汇总</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DOM选择器]]></title>
    <url>%2FBlog%2Fposts%2F1.html</url>
    <content type="text"><![CDATA[属性选择器属性选择器是在CSS2中引入的，他们能够指定一些规则，这些规则根据元素的属性（诸如href或title）以及这些属性的值对元素进行匹配 12345&lt;ul&gt; &lt;li&gt;&lt;a href="" lang="en-GB" rel="friend net"&gt;Peter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="" lang="es-ES" rel-"fiend"&gt;Pedro&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="" lang="es-MX" rel-"contact"&gt;Pancho&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 简单属性选择器将规则应用到定义了指定属性的元素上，而不管属性的值是什么 123a[rel] &#123; color: red;&#125; 由于所有元素都有rel属性，所以所有元素都会应用这条规则 精确属性值选择器123a[rel='friend'] &#123; color: red;&#125; 这个代码只会将规则标记到第二个a元素 部分属性选择器123a[rel~='friend'] &#123; color: red;&#125; 这个代码会选择rel属性中带有friend的值的元素，则这个规则会标记到第一与第二个 语言属性选择器123a[lang|='es'] &#123; color: red;&#125; 选中所有属性值以es开头的lang语言，即会选中2和3 CSS3的新属性选择器开始字串属性值选择器（开始选择器）该选择器会选择一些元素，这些元素所选择的属性是以一个字符串为起始，该字符串会作为参数提供给选择器，这个选择器使用插入符号(^)修饰属性中的等号 1E[attr^='value'] &#123;&#125; 这行代码将在指定属性的起始处寻找指定的值示例如下： 123456&lt;p&gt;Lorem ipsum dolor &lt;a href="mailto:email@example.com"&gt;email&lt;a&gt; sit amet.&lt;/a&gt;&lt;/p&gt;&lt;style&gt;a[href^='mailto'] &#123; background-image: url('email_go.png');&#125;&lt;/style&gt; 输出结果为： 1Lorem ipsum dolor email sit amet. #这里的email是一个地址即上述href绑定的地址 email原为一图片索引，本人懒就没放图片 结束子串属性值选择器（结束选择器）与开始选择器相反，使用该选择器去选择以指定的值结束的属性语法差异为用($)去修饰(=) 任意子串属性值选择器（任意选择器）该选择器使用规则即在指定的属性字符串的内部任意位置搜索指定的子串该选择器使用的符号是(*) 多属性选择器可以把多个选择器串接在一起，这样在选择目标的时候能够做到非常的具体，使用多选择器，可以通过定义在开始、结束以及中间任意位置的值创建应用到属性上的规则 12&lt;p&gt;&lt;a href="http://example.com/folder1/file.pdf"&gt;Lorem ipsum&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://example.com/folder2/file.pdf"&gt;Lorem ipsum&lt;/a&gt;&lt;/p&gt; 如果要指定一条只应用到第二个p元素的规则，可以把一些选择器串接到一起： 1a[href^='http://'][href*='/folder2/'][href$='.pdf'] &#123;&#125; 这行代码会寻找这样的a元素，它具有一个href属性，是以 http: // 开始，以.pdf结束，并且在中间包含了/folder2/，非常明确 普通兄弟连结符12E + F &#123;&#125; #相邻兄弟连结符E ~ F &#123;&#125; #普通兄弟连结符 相邻兄弟连结符选择的是文档树的同一层级，紧邻在元素(E)之后的任意元素；普通兄弟连结符选择的是文档树的同一层级，位于元素(E)之后的任意元素。示例如下： 12345678910111213141516&lt;p&gt;Next we are going to discuss ... &lt;/p&gt;&lt;h2&gt;Ren&amp;eacute; Descartes&lt;/h2&gt;&lt;p&gt;A highly influential French philosopher...&lt;/p&gt;&lt;p&gt;He only famously declared:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;I think,therefore I am.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;However,this presumes the existence of the speaker.&lt;/p&gt;&lt;style&gt;h2 + p &#123; font-weight:bolder;&#125;h2 ~ p &#123; font-style: italic;&#125;&lt;/style&gt; 输出结果如下：]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS快速入门]]></title>
    <url>%2FBlog%2Fposts%2F0.html</url>
    <content type="text"><![CDATA[入门语法介绍box-sizing属性box-sizing,可以设定元素的大小该如何计算，包括两个属性：content-box 与 border-box 123div &#123; boc-sizing: content-box;&#125; 上面的代码box-sizing的默认值是content-box,对元素设置所设定的宽度会应用到该元素的内容上，而填充和边框会照常加上去如果把值设置为border-box，则意味着设定的width值是内容、填充和边框的总宽度示例如下： 123456div &#123; border: 10px solid black; box-sizing: border-box; padding: 10px; width: 150px;&#125; 现在150px的宽度包括了填充和边框，二者在内容两侧都占据了10px，所以div元素的内容计算宽度就是110px，即150px减去20px的填充和20px的边框对于Firefox来说，关于它的-moz-box-sizing属性，有额外的padding-box属性，使用这个值，计算元素属性时会对它的填充和内容进行计算，不包括边框]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
